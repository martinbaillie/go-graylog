// Code generated by go-swagger; DO NOT EDIT.

package api_docs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRouteParams creates a new RouteParams object
// with the default values initialized.
func NewRouteParams() *RouteParams {
	var ()
	return &RouteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRouteParamsWithTimeout creates a new RouteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRouteParamsWithTimeout(timeout time.Duration) *RouteParams {
	var ()
	return &RouteParams{

		timeout: timeout,
	}
}

// NewRouteParamsWithContext creates a new RouteParams object
// with the default values initialized, and the ability to set a context for a request
func NewRouteParamsWithContext(ctx context.Context) *RouteParams {
	var ()
	return &RouteParams{

		Context: ctx,
	}
}

// NewRouteParamsWithHTTPClient creates a new RouteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRouteParamsWithHTTPClient(client *http.Client) *RouteParams {
	var ()
	return &RouteParams{
		HTTPClient: client,
	}
}

/*RouteParams contains all the parameters to send to the API endpoint
for the route operation typically these are written to a http.Request
*/
type RouteParams struct {

	/*Route
	  Route to fetch. For example /system

	*/
	Route string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the route params
func (o *RouteParams) WithTimeout(timeout time.Duration) *RouteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the route params
func (o *RouteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the route params
func (o *RouteParams) WithContext(ctx context.Context) *RouteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the route params
func (o *RouteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the route params
func (o *RouteParams) WithHTTPClient(client *http.Client) *RouteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the route params
func (o *RouteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRoute adds the route to the route params
func (o *RouteParams) WithRoute(route string) *RouteParams {
	o.SetRoute(route)
	return o
}

// SetRoute adds the route to the route params
func (o *RouteParams) SetRoute(route string) {
	o.Route = route
}

// WriteToRequest writes these params to a swagger request
func (o *RouteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param route
	if err := r.SetPathParam("route", o.Route); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
