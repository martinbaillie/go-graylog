// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/martinbaillie/go-graylog/pkg/models"
)

// NewChangeUserParams creates a new ChangeUserParams object
// with the default values initialized.
func NewChangeUserParams() *ChangeUserParams {
	var ()
	return &ChangeUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewChangeUserParamsWithTimeout creates a new ChangeUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewChangeUserParamsWithTimeout(timeout time.Duration) *ChangeUserParams {
	var ()
	return &ChangeUserParams{

		timeout: timeout,
	}
}

// NewChangeUserParamsWithContext creates a new ChangeUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewChangeUserParamsWithContext(ctx context.Context) *ChangeUserParams {
	var ()
	return &ChangeUserParams{

		Context: ctx,
	}
}

// NewChangeUserParamsWithHTTPClient creates a new ChangeUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewChangeUserParamsWithHTTPClient(client *http.Client) *ChangeUserParams {
	var ()
	return &ChangeUserParams{
		HTTPClient: client,
	}
}

/*ChangeUserParams contains all the parameters to send to the API endpoint
for the change user operation typically these are written to a http.Request
*/
type ChangeUserParams struct {

	/*JSONBody
	  Updated user information.

	*/
	JSONBody *models.ChangeUserRequest
	/*Username
	  The name of the user to modify.

	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the change user params
func (o *ChangeUserParams) WithTimeout(timeout time.Duration) *ChangeUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the change user params
func (o *ChangeUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the change user params
func (o *ChangeUserParams) WithContext(ctx context.Context) *ChangeUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the change user params
func (o *ChangeUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the change user params
func (o *ChangeUserParams) WithHTTPClient(client *http.Client) *ChangeUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the change user params
func (o *ChangeUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJSONBody adds the jSONBody to the change user params
func (o *ChangeUserParams) WithJSONBody(jSONBody *models.ChangeUserRequest) *ChangeUserParams {
	o.SetJSONBody(jSONBody)
	return o
}

// SetJSONBody adds the jsonBody to the change user params
func (o *ChangeUserParams) SetJSONBody(jSONBody *models.ChangeUserRequest) {
	o.JSONBody = jSONBody
}

// WithUsername adds the username to the change user params
func (o *ChangeUserParams) WithUsername(username string) *ChangeUserParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the change user params
func (o *ChangeUserParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *ChangeUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.JSONBody != nil {
		if err := r.SetBodyParam(o.JSONBody); err != nil {
			return err
		}
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
