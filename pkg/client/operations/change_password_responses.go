// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ChangePasswordReader is a Reader for the ChangePassword structure.
type ChangePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewChangePasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewChangePasswordNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewChangePasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewChangePasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewChangePasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewChangePasswordOK creates a ChangePasswordOK with default headers values
func NewChangePasswordOK() *ChangePasswordOK {
	return &ChangePasswordOK{}
}

/*ChangePasswordOK handles this case with default header values.

No response was specified
*/
type ChangePasswordOK struct {
}

func (o *ChangePasswordOK) Error() string {
	return fmt.Sprintf("[PUT /users/{username}/password][%d] changePasswordOK ", 200)
}

func (o *ChangePasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangePasswordNoContent creates a ChangePasswordNoContent with default headers values
func NewChangePasswordNoContent() *ChangePasswordNoContent {
	return &ChangePasswordNoContent{}
}

/*ChangePasswordNoContent handles this case with default header values.

The password was successfully updated. Subsequent requests must be made with the new password.
*/
type ChangePasswordNoContent struct {
}

func (o *ChangePasswordNoContent) Error() string {
	return fmt.Sprintf("[PUT /users/{username}/password][%d] changePasswordNoContent ", 204)
}

func (o *ChangePasswordNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangePasswordBadRequest creates a ChangePasswordBadRequest with default headers values
func NewChangePasswordBadRequest() *ChangePasswordBadRequest {
	return &ChangePasswordBadRequest{}
}

/*ChangePasswordBadRequest handles this case with default header values.

The new password is missing, or the old password is missing or incorrect.
*/
type ChangePasswordBadRequest struct {
}

func (o *ChangePasswordBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/{username}/password][%d] changePasswordBadRequest ", 400)
}

func (o *ChangePasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangePasswordForbidden creates a ChangePasswordForbidden with default headers values
func NewChangePasswordForbidden() *ChangePasswordForbidden {
	return &ChangePasswordForbidden{}
}

/*ChangePasswordForbidden handles this case with default header values.

The requesting user has insufficient privileges to update the password for the given user.
*/
type ChangePasswordForbidden struct {
}

func (o *ChangePasswordForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{username}/password][%d] changePasswordForbidden ", 403)
}

func (o *ChangePasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangePasswordNotFound creates a ChangePasswordNotFound with default headers values
func NewChangePasswordNotFound() *ChangePasswordNotFound {
	return &ChangePasswordNotFound{}
}

/*ChangePasswordNotFound handles this case with default header values.

User does not exist.
*/
type ChangePasswordNotFound struct {
}

func (o *ChangePasswordNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{username}/password][%d] changePasswordNotFound ", 404)
}

func (o *ChangePasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
