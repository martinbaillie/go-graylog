// Code generated by go-swagger; DO NOT EDIT.

package system_cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ApplyBundleReader is a Reader for the ApplyBundle structure.
type ApplyBundleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplyBundleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewApplyBundleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewApplyBundleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewApplyBundleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewApplyBundleOK creates a ApplyBundleOK with default headers values
func NewApplyBundleOK() *ApplyBundleOK {
	return &ApplyBundleOK{}
}

/*ApplyBundleOK handles this case with default header values.

No response was specified
*/
type ApplyBundleOK struct {
}

func (o *ApplyBundleOK) Error() string {
	return fmt.Sprintf("[POST /system/bundles/{bundleId}/apply][%d] applyBundleOK ", 200)
}

func (o *ApplyBundleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewApplyBundleNotFound creates a ApplyBundleNotFound with default headers values
func NewApplyBundleNotFound() *ApplyBundleNotFound {
	return &ApplyBundleNotFound{}
}

/*ApplyBundleNotFound handles this case with default header values.

Missing or invalid content pack
*/
type ApplyBundleNotFound struct {
}

func (o *ApplyBundleNotFound) Error() string {
	return fmt.Sprintf("[POST /system/bundles/{bundleId}/apply][%d] applyBundleNotFound ", 404)
}

func (o *ApplyBundleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewApplyBundleInternalServerError creates a ApplyBundleInternalServerError with default headers values
func NewApplyBundleInternalServerError() *ApplyBundleInternalServerError {
	return &ApplyBundleInternalServerError{}
}

/*ApplyBundleInternalServerError handles this case with default header values.

Error while applying content pack
*/
type ApplyBundleInternalServerError struct {
}

func (o *ApplyBundleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /system/bundles/{bundleId}/apply][%d] applyBundleInternalServerError ", 500)
}

func (o *ApplyBundleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
