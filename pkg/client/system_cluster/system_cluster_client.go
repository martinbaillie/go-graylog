// Code generated by go-swagger; DO NOT EDIT.

package system_cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system cluster API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system cluster API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ApplyBundle sets up entities described by content pack
*/
func (a *Client) ApplyBundle(params *ApplyBundleParams, authInfo runtime.ClientAuthInfoWriter) (*ApplyBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyBundleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "applyBundle",
		Method:             "POST",
		PathPattern:        "/system/bundles/{bundleId}/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplyBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ApplyBundleOK), nil

}

/*
CreateBundle uploads a content pack
*/
func (a *Client) CreateBundle(params *CreateBundleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBundleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBundle",
		Method:             "POST",
		PathPattern:        "/system/bundles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateBundleOK), nil

}

/*
ExportBundle exports entities as a content pack
*/
func (a *Client) ExportBundle(params *ExportBundleParams, authInfo runtime.ClientAuthInfoWriter) (*ExportBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportBundleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportBundle",
		Method:             "POST",
		PathPattern:        "/system/bundles/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportBundleOK), nil

}

/*
ShowBundle shows content pack
*/
func (a *Client) ShowBundle(params *ShowBundleParams, authInfo runtime.ClientAuthInfoWriter) (*ShowBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowBundleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "showBundle",
		Method:             "GET",
		PathPattern:        "/system/bundles/{bundleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowBundleOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
