// Code generated by go-swagger; DO NOT EDIT.

package system_lbstatus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system lbstatus API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system lbstatus API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ReadGroupMapping gets the l d a p group to graylog role mapping

The return value is a simple hash with keys being the LDAP group names and the values the corresponding Graylog role names.
*/
func (a *Client) ReadGroupMapping(params *ReadGroupMappingParams, authInfo runtime.ClientAuthInfoWriter) (*ReadGroupMappingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadGroupMappingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readGroupMapping",
		Method:             "GET",
		PathPattern:        "/system/ldap/settings/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadGroupMappingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadGroupMappingOK), nil

}

/*
ReadGroups gets the available l d a p groups
*/
func (a *Client) ReadGroups(params *ReadGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*ReadGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readGroups",
		Method:             "GET",
		PathPattern:        "/system/ldap/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadGroupsOK), nil

}

/*
TestLdapConfiguration tests l d a p configuration
*/
func (a *Client) TestLdapConfiguration(params *TestLdapConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*TestLdapConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestLdapConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testLdapConfiguration",
		Method:             "POST",
		PathPattern:        "/system/ldap/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestLdapConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestLdapConfigurationOK), nil

}

/*
UpdateLdapSettings updates the l d a p configuration
*/
func (a *Client) UpdateLdapSettings(params *UpdateLdapSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLdapSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLdapSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLdapSettings",
		Method:             "PUT",
		PathPattern:        "/system/ldap/settings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLdapSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateLdapSettingsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
