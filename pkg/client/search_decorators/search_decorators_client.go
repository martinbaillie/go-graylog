// Code generated by go-swagger; DO NOT EDIT.

package search_decorators

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new search decorators API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for search decorators API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ExportSearchAbsoluteChunked exports message search with absolute timerange

Search for messages using an absolute timerange, specified as from/to with format yyyy-MM-ddTHH:mm:ss.SSSZ (e.g. 2014-01-23T15:34:49.000Z) or yyyy-MM-dd HH:mm:ss.
*/
func (a *Client) ExportSearchAbsoluteChunked(params *ExportSearchAbsoluteChunkedParams, authInfo runtime.ClientAuthInfoWriter) (*ExportSearchAbsoluteChunkedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportSearchAbsoluteChunkedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportSearchAbsoluteChunked",
		Method:             "GET",
		PathPattern:        "/search/universal/absolute/export",
		ProducesMediaTypes: []string{"text/csv"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportSearchAbsoluteChunkedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportSearchAbsoluteChunkedOK), nil

}

/*
FieldHistogramAbsolute fields value histogram of a query using an absolute timerange
*/
func (a *Client) FieldHistogramAbsolute(params *FieldHistogramAbsoluteParams, authInfo runtime.ClientAuthInfoWriter) (*FieldHistogramAbsoluteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFieldHistogramAbsoluteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fieldHistogramAbsolute",
		Method:             "GET",
		PathPattern:        "/search/universal/absolute/fieldhistogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FieldHistogramAbsoluteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FieldHistogramAbsoluteOK), nil

}

/*
HistogramAbsolute datetimes histogram of a query using an absolute timerange
*/
func (a *Client) HistogramAbsolute(params *HistogramAbsoluteParams, authInfo runtime.ClientAuthInfoWriter) (*HistogramAbsoluteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHistogramAbsoluteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "histogramAbsolute",
		Method:             "GET",
		PathPattern:        "/search/universal/absolute/histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HistogramAbsoluteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HistogramAbsoluteOK), nil

}

/*
SearchAbsolute messages search with absolute timerange

Search for messages using an absolute timerange, specified as from/to with format yyyy-MM-ddTHH:mm:ss.SSSZ (e.g. 2014-01-23T15:34:49.000Z) or yyyy-MM-dd HH:mm:ss.
*/
func (a *Client) SearchAbsolute(params *SearchAbsoluteParams, authInfo runtime.ClientAuthInfoWriter) (*SearchAbsoluteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAbsoluteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchAbsolute",
		Method:             "GET",
		PathPattern:        "/search/universal/absolute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAbsoluteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchAbsoluteOK), nil

}

/*
StatsAbsolute fields statistics for a query using an absolute timerange

Returns statistics like min/max or standard deviation of numeric fields over the whole query result set.
*/
func (a *Client) StatsAbsolute(params *StatsAbsoluteParams, authInfo runtime.ClientAuthInfoWriter) (*StatsAbsoluteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatsAbsoluteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statsAbsolute",
		Method:             "GET",
		PathPattern:        "/search/universal/absolute/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatsAbsoluteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatsAbsoluteOK), nil

}

/*
TermsAbsolute mosts common field terms of a query using an absolute timerange
*/
func (a *Client) TermsAbsolute(params *TermsAbsoluteParams, authInfo runtime.ClientAuthInfoWriter) (*TermsAbsoluteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTermsAbsoluteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "termsAbsolute",
		Method:             "GET",
		PathPattern:        "/search/universal/absolute/terms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TermsAbsoluteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TermsAbsoluteOK), nil

}

/*
TermsStatsAbsolute ordereds field terms of a query computed on another field using an absolute timerange
*/
func (a *Client) TermsStatsAbsolute(params *TermsStatsAbsoluteParams, authInfo runtime.ClientAuthInfoWriter) (*TermsStatsAbsoluteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTermsStatsAbsoluteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "termsStatsAbsolute",
		Method:             "GET",
		PathPattern:        "/search/universal/absolute/termsstats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TermsStatsAbsoluteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TermsStatsAbsoluteOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
