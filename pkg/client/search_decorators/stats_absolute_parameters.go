// Code generated by go-swagger; DO NOT EDIT.

package search_decorators

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStatsAbsoluteParams creates a new StatsAbsoluteParams object
// with the default values initialized.
func NewStatsAbsoluteParams() *StatsAbsoluteParams {
	var ()
	return &StatsAbsoluteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStatsAbsoluteParamsWithTimeout creates a new StatsAbsoluteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStatsAbsoluteParamsWithTimeout(timeout time.Duration) *StatsAbsoluteParams {
	var ()
	return &StatsAbsoluteParams{

		timeout: timeout,
	}
}

// NewStatsAbsoluteParamsWithContext creates a new StatsAbsoluteParams object
// with the default values initialized, and the ability to set a context for a request
func NewStatsAbsoluteParamsWithContext(ctx context.Context) *StatsAbsoluteParams {
	var ()
	return &StatsAbsoluteParams{

		Context: ctx,
	}
}

// NewStatsAbsoluteParamsWithHTTPClient creates a new StatsAbsoluteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStatsAbsoluteParamsWithHTTPClient(client *http.Client) *StatsAbsoluteParams {
	var ()
	return &StatsAbsoluteParams{
		HTTPClient: client,
	}
}

/*StatsAbsoluteParams contains all the parameters to send to the API endpoint
for the stats absolute operation typically these are written to a http.Request
*/
type StatsAbsoluteParams struct {

	/*Field
	  Message field of numeric type to return statistics for

	*/
	Field string
	/*Filter
	  Filter

	*/
	Filter *string
	/*From
	  Timerange start. See search method description for date format

	*/
	From string
	/*Query
	  Query (Lucene syntax)

	*/
	Query string
	/*To
	  Timerange end. See search method description for date format

	*/
	To string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stats absolute params
func (o *StatsAbsoluteParams) WithTimeout(timeout time.Duration) *StatsAbsoluteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stats absolute params
func (o *StatsAbsoluteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stats absolute params
func (o *StatsAbsoluteParams) WithContext(ctx context.Context) *StatsAbsoluteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stats absolute params
func (o *StatsAbsoluteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stats absolute params
func (o *StatsAbsoluteParams) WithHTTPClient(client *http.Client) *StatsAbsoluteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stats absolute params
func (o *StatsAbsoluteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithField adds the field to the stats absolute params
func (o *StatsAbsoluteParams) WithField(field string) *StatsAbsoluteParams {
	o.SetField(field)
	return o
}

// SetField adds the field to the stats absolute params
func (o *StatsAbsoluteParams) SetField(field string) {
	o.Field = field
}

// WithFilter adds the filter to the stats absolute params
func (o *StatsAbsoluteParams) WithFilter(filter *string) *StatsAbsoluteParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the stats absolute params
func (o *StatsAbsoluteParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithFrom adds the from to the stats absolute params
func (o *StatsAbsoluteParams) WithFrom(from string) *StatsAbsoluteParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the stats absolute params
func (o *StatsAbsoluteParams) SetFrom(from string) {
	o.From = from
}

// WithQuery adds the query to the stats absolute params
func (o *StatsAbsoluteParams) WithQuery(query string) *StatsAbsoluteParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the stats absolute params
func (o *StatsAbsoluteParams) SetQuery(query string) {
	o.Query = query
}

// WithTo adds the to to the stats absolute params
func (o *StatsAbsoluteParams) WithTo(to string) *StatsAbsoluteParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the stats absolute params
func (o *StatsAbsoluteParams) SetTo(to string) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *StatsAbsoluteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param field
	qrField := o.Field
	qField := qrField
	if qField != "" {
		if err := r.SetQueryParam("field", qField); err != nil {
			return err
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	// query param from
	qrFrom := o.From
	qFrom := qrFrom
	if qFrom != "" {
		if err := r.SetQueryParam("from", qFrom); err != nil {
			return err
		}
	}

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {
		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	// query param to
	qrTo := o.To
	qTo := qrTo
	if qTo != "" {
		if err := r.SetQueryParam("to", qTo); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
