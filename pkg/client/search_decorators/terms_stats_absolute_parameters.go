// Code generated by go-swagger; DO NOT EDIT.

package search_decorators

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTermsStatsAbsoluteParams creates a new TermsStatsAbsoluteParams object
// with the default values initialized.
func NewTermsStatsAbsoluteParams() *TermsStatsAbsoluteParams {
	var ()
	return &TermsStatsAbsoluteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTermsStatsAbsoluteParamsWithTimeout creates a new TermsStatsAbsoluteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTermsStatsAbsoluteParamsWithTimeout(timeout time.Duration) *TermsStatsAbsoluteParams {
	var ()
	return &TermsStatsAbsoluteParams{

		timeout: timeout,
	}
}

// NewTermsStatsAbsoluteParamsWithContext creates a new TermsStatsAbsoluteParams object
// with the default values initialized, and the ability to set a context for a request
func NewTermsStatsAbsoluteParamsWithContext(ctx context.Context) *TermsStatsAbsoluteParams {
	var ()
	return &TermsStatsAbsoluteParams{

		Context: ctx,
	}
}

// NewTermsStatsAbsoluteParamsWithHTTPClient creates a new TermsStatsAbsoluteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTermsStatsAbsoluteParamsWithHTTPClient(client *http.Client) *TermsStatsAbsoluteParams {
	var ()
	return &TermsStatsAbsoluteParams{
		HTTPClient: client,
	}
}

/*TermsStatsAbsoluteParams contains all the parameters to send to the API endpoint
for the terms stats absolute operation typically these are written to a http.Request
*/
type TermsStatsAbsoluteParams struct {

	/*Filter
	  Filter

	*/
	Filter *string
	/*From
	  Timerange start. See search method description for date format

	*/
	From string
	/*KeyField
	  Message field of to return terms of

	*/
	KeyField string
	/*Order
	  What to order on (Allowed values: TERM, REVERSE_TERM, COUNT, REVERSE_COUNT, TOTAL, REVERSE_TOTAL, MIN, REVERSE_MIN, MAX, REVERSE_MAX, MEAN, REVERSE_MEAN)

	*/
	Order string
	/*Query
	  Query (Lucene syntax)

	*/
	Query string
	/*Size
	  Maximum number of terms to return

	*/
	Size *int64
	/*To
	  Timerange end. See search method description for date format

	*/
	To string
	/*ValueField
	  Value field used for computation

	*/
	ValueField string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithTimeout(timeout time.Duration) *TermsStatsAbsoluteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithContext(ctx context.Context) *TermsStatsAbsoluteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithHTTPClient(client *http.Client) *TermsStatsAbsoluteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithFilter(filter *string) *TermsStatsAbsoluteParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithFrom adds the from to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithFrom(from string) *TermsStatsAbsoluteParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetFrom(from string) {
	o.From = from
}

// WithKeyField adds the keyField to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithKeyField(keyField string) *TermsStatsAbsoluteParams {
	o.SetKeyField(keyField)
	return o
}

// SetKeyField adds the keyField to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetKeyField(keyField string) {
	o.KeyField = keyField
}

// WithOrder adds the order to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithOrder(order string) *TermsStatsAbsoluteParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetOrder(order string) {
	o.Order = order
}

// WithQuery adds the query to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithQuery(query string) *TermsStatsAbsoluteParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetQuery(query string) {
	o.Query = query
}

// WithSize adds the size to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithSize(size *int64) *TermsStatsAbsoluteParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetSize(size *int64) {
	o.Size = size
}

// WithTo adds the to to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithTo(to string) *TermsStatsAbsoluteParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetTo(to string) {
	o.To = to
}

// WithValueField adds the valueField to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) WithValueField(valueField string) *TermsStatsAbsoluteParams {
	o.SetValueField(valueField)
	return o
}

// SetValueField adds the valueField to the terms stats absolute params
func (o *TermsStatsAbsoluteParams) SetValueField(valueField string) {
	o.ValueField = valueField
}

// WriteToRequest writes these params to a swagger request
func (o *TermsStatsAbsoluteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	// query param from
	qrFrom := o.From
	qFrom := qrFrom
	if qFrom != "" {
		if err := r.SetQueryParam("from", qFrom); err != nil {
			return err
		}
	}

	// query param key_field
	qrKeyField := o.KeyField
	qKeyField := qrKeyField
	if qKeyField != "" {
		if err := r.SetQueryParam("key_field", qKeyField); err != nil {
			return err
		}
	}

	// query param order
	qrOrder := o.Order
	qOrder := qrOrder
	if qOrder != "" {
		if err := r.SetQueryParam("order", qOrder); err != nil {
			return err
		}
	}

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {
		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int64
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	// query param to
	qrTo := o.To
	qTo := qrTo
	if qTo != "" {
		if err := r.SetQueryParam("to", qTo); err != nil {
			return err
		}
	}

	// query param value_field
	qrValueField := o.ValueField
	qValueField := qrValueField
	if qValueField != "" {
		if err := r.SetQueryParam("value_field", qValueField); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
