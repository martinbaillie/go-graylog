// Code generated by go-swagger; DO NOT EDIT.

package streams_streamid_outputs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCheckConditionsParams creates a new CheckConditionsParams object
// with the default values initialized.
func NewCheckConditionsParams() *CheckConditionsParams {
	var ()
	return &CheckConditionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCheckConditionsParamsWithTimeout creates a new CheckConditionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCheckConditionsParamsWithTimeout(timeout time.Duration) *CheckConditionsParams {
	var ()
	return &CheckConditionsParams{

		timeout: timeout,
	}
}

// NewCheckConditionsParamsWithContext creates a new CheckConditionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewCheckConditionsParamsWithContext(ctx context.Context) *CheckConditionsParams {
	var ()
	return &CheckConditionsParams{

		Context: ctx,
	}
}

// NewCheckConditionsParamsWithHTTPClient creates a new CheckConditionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCheckConditionsParamsWithHTTPClient(client *http.Client) *CheckConditionsParams {
	var ()
	return &CheckConditionsParams{
		HTTPClient: client,
	}
}

/*CheckConditionsParams contains all the parameters to send to the API endpoint
for the check conditions operation typically these are written to a http.Request
*/
type CheckConditionsParams struct {

	/*StreamID
	  The ID of the stream to check.

	*/
	StreamID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the check conditions params
func (o *CheckConditionsParams) WithTimeout(timeout time.Duration) *CheckConditionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the check conditions params
func (o *CheckConditionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the check conditions params
func (o *CheckConditionsParams) WithContext(ctx context.Context) *CheckConditionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the check conditions params
func (o *CheckConditionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the check conditions params
func (o *CheckConditionsParams) WithHTTPClient(client *http.Client) *CheckConditionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the check conditions params
func (o *CheckConditionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithStreamID adds the streamID to the check conditions params
func (o *CheckConditionsParams) WithStreamID(streamID string) *CheckConditionsParams {
	o.SetStreamID(streamID)
	return o
}

// SetStreamID adds the streamId to the check conditions params
func (o *CheckConditionsParams) SetStreamID(streamID string) {
	o.StreamID = streamID
}

// WriteToRequest writes these params to a swagger request
func (o *CheckConditionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param streamId
	if err := r.SetPathParam("streamId", o.StreamID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
