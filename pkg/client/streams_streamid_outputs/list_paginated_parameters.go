// Code generated by go-swagger; DO NOT EDIT.

package streams_streamid_outputs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListPaginatedParams creates a new ListPaginatedParams object
// with the default values initialized.
func NewListPaginatedParams() *ListPaginatedParams {
	var (
		limitDefault = int64(300)
		skipDefault  = int64(0)
	)
	return &ListPaginatedParams{
		Limit: limitDefault,
		Skip:  skipDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListPaginatedParamsWithTimeout creates a new ListPaginatedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListPaginatedParamsWithTimeout(timeout time.Duration) *ListPaginatedParams {
	var (
		limitDefault = int64(300)
		skipDefault  = int64(0)
	)
	return &ListPaginatedParams{
		Limit: limitDefault,
		Skip:  skipDefault,

		timeout: timeout,
	}
}

// NewListPaginatedParamsWithContext creates a new ListPaginatedParams object
// with the default values initialized, and the ability to set a context for a request
func NewListPaginatedParamsWithContext(ctx context.Context) *ListPaginatedParams {
	var (
		limitDefault = int64(300)
		skipDefault  = int64(0)
	)
	return &ListPaginatedParams{
		Limit: limitDefault,
		Skip:  skipDefault,

		Context: ctx,
	}
}

// NewListPaginatedParamsWithHTTPClient creates a new ListPaginatedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListPaginatedParamsWithHTTPClient(client *http.Client) *ListPaginatedParams {
	var (
		limitDefault = int64(300)
		skipDefault  = int64(0)
	)
	return &ListPaginatedParams{
		Limit:      limitDefault,
		Skip:       skipDefault,
		HTTPClient: client,
	}
}

/*ListPaginatedParams contains all the parameters to send to the API endpoint
for the list paginated operation typically these are written to a http.Request
*/
type ListPaginatedParams struct {

	/*Limit
	  The maximum number of elements to return.

	*/
	Limit int64
	/*Skip
	  The number of elements to skip (offset).

	*/
	Skip int64
	/*StreamID
	  The stream id this new alert condition belongs to.

	*/
	StreamID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list paginated params
func (o *ListPaginatedParams) WithTimeout(timeout time.Duration) *ListPaginatedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list paginated params
func (o *ListPaginatedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list paginated params
func (o *ListPaginatedParams) WithContext(ctx context.Context) *ListPaginatedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list paginated params
func (o *ListPaginatedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list paginated params
func (o *ListPaginatedParams) WithHTTPClient(client *http.Client) *ListPaginatedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list paginated params
func (o *ListPaginatedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the list paginated params
func (o *ListPaginatedParams) WithLimit(limit int64) *ListPaginatedParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list paginated params
func (o *ListPaginatedParams) SetLimit(limit int64) {
	o.Limit = limit
}

// WithSkip adds the skip to the list paginated params
func (o *ListPaginatedParams) WithSkip(skip int64) *ListPaginatedParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the list paginated params
func (o *ListPaginatedParams) SetSkip(skip int64) {
	o.Skip = skip
}

// WithStreamID adds the streamID to the list paginated params
func (o *ListPaginatedParams) WithStreamID(streamID string) *ListPaginatedParams {
	o.SetStreamID(streamID)
	return o
}

// SetStreamID adds the streamId to the list paginated params
func (o *ListPaginatedParams) SetStreamID(streamID string) {
	o.StreamID = streamID
}

// WriteToRequest writes these params to a swagger request
func (o *ListPaginatedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param limit
	qrLimit := o.Limit
	qLimit := swag.FormatInt64(qrLimit)
	if qLimit != "" {
		if err := r.SetQueryParam("limit", qLimit); err != nil {
			return err
		}
	}

	// query param skip
	qrSkip := o.Skip
	qSkip := swag.FormatInt64(qrSkip)
	if qSkip != "" {
		if err := r.SetQueryParam("skip", qSkip); err != nil {
			return err
		}
	}

	// path param streamId
	if err := r.SetPathParam("streamId", o.StreamID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
