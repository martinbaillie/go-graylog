// Code generated by go-swagger; DO NOT EDIT.

package streams_streamid_outputs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddReceiverParams creates a new AddReceiverParams object
// with the default values initialized.
func NewAddReceiverParams() *AddReceiverParams {
	var ()
	return &AddReceiverParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddReceiverParamsWithTimeout creates a new AddReceiverParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddReceiverParamsWithTimeout(timeout time.Duration) *AddReceiverParams {
	var ()
	return &AddReceiverParams{

		timeout: timeout,
	}
}

// NewAddReceiverParamsWithContext creates a new AddReceiverParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddReceiverParamsWithContext(ctx context.Context) *AddReceiverParams {
	var ()
	return &AddReceiverParams{

		Context: ctx,
	}
}

// NewAddReceiverParamsWithHTTPClient creates a new AddReceiverParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddReceiverParamsWithHTTPClient(client *http.Client) *AddReceiverParams {
	var ()
	return &AddReceiverParams{
		HTTPClient: client,
	}
}

/*AddReceiverParams contains all the parameters to send to the API endpoint
for the add receiver operation typically these are written to a http.Request
*/
type AddReceiverParams struct {

	/*Entity
	  Name/ID of user or email address to add as alert receiver.

	*/
	Entity string
	/*StreamID
	  The stream id this new alert condition belongs to.

	*/
	StreamID string
	/*Type
	  Type: users or emails

	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add receiver params
func (o *AddReceiverParams) WithTimeout(timeout time.Duration) *AddReceiverParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add receiver params
func (o *AddReceiverParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add receiver params
func (o *AddReceiverParams) WithContext(ctx context.Context) *AddReceiverParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add receiver params
func (o *AddReceiverParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add receiver params
func (o *AddReceiverParams) WithHTTPClient(client *http.Client) *AddReceiverParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add receiver params
func (o *AddReceiverParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEntity adds the entity to the add receiver params
func (o *AddReceiverParams) WithEntity(entity string) *AddReceiverParams {
	o.SetEntity(entity)
	return o
}

// SetEntity adds the entity to the add receiver params
func (o *AddReceiverParams) SetEntity(entity string) {
	o.Entity = entity
}

// WithStreamID adds the streamID to the add receiver params
func (o *AddReceiverParams) WithStreamID(streamID string) *AddReceiverParams {
	o.SetStreamID(streamID)
	return o
}

// SetStreamID adds the streamId to the add receiver params
func (o *AddReceiverParams) SetStreamID(streamID string) {
	o.StreamID = streamID
}

// WithType adds the typeVar to the add receiver params
func (o *AddReceiverParams) WithType(typeVar string) *AddReceiverParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the add receiver params
func (o *AddReceiverParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *AddReceiverParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param entity
	qrEntity := o.Entity
	qEntity := qrEntity
	if qEntity != "" {
		if err := r.SetQueryParam("entity", qEntity); err != nil {
			return err
		}
	}

	// path param streamId
	if err := r.SetPathParam("streamId", o.StreamID); err != nil {
		return err
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {
		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
