// Code generated by go-swagger; DO NOT EDIT.

package streams_streamid_outputs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new streams streamid outputs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for streams streamid outputs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddReceiver adds an alert receiver
*/
func (a *Client) AddReceiver(params *AddReceiverParams, authInfo runtime.ClientAuthInfoWriter) (*AddReceiverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddReceiverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addReceiver",
		Method:             "POST",
		PathPattern:        "/streams/{streamId}/alerts/receivers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddReceiverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddReceiverOK), nil

}

/*
CheckConditions checks for triggered alert conditions of this streams results cached for 30 seconds
*/
func (a *Client) CheckConditions(params *CheckConditionsParams, authInfo runtime.ClientAuthInfoWriter) (*CheckConditionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckConditionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkConditions",
		Method:             "GET",
		PathPattern:        "/streams/{streamId}/alerts/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckConditionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CheckConditionsOK), nil

}

/*
ListPaginated gets the alarms of this stream filtered by specifying limit and offset parameters
*/
func (a *Client) ListPaginated(params *ListPaginatedParams, authInfo runtime.ClientAuthInfoWriter) (*ListPaginatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPaginatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listPaginated",
		Method:             "GET",
		PathPattern:        "/streams/{streamId}/alerts/paginated",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPaginatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListPaginatedOK), nil

}

/*
SendDummyAlert sends a test mail for a given stream
*/
func (a *Client) SendDummyAlert(params *SendDummyAlertParams, authInfo runtime.ClientAuthInfoWriter) (*SendDummyAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendDummyAlertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendDummyAlert",
		Method:             "POST",
		PathPattern:        "/streams/{streamId}/alerts/sendDummyAlert",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendDummyAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendDummyAlertOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
