// Code generated by go-swagger; DO NOT EDIT.

package system_inputs_input_id_extractors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// OrderReader is a Reader for the Order structure.
type OrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOrderOK creates a OrderOK with default headers values
func NewOrderOK() *OrderOK {
	return &OrderOK{}
}

/*OrderOK handles this case with default header values.

No response was specified
*/
type OrderOK struct {
}

func (o *OrderOK) Error() string {
	return fmt.Sprintf("[POST /system/inputs/{inputId}/extractors/order][%d] orderOK ", 200)
}

func (o *OrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOrderNotFound creates a OrderNotFound with default headers values
func NewOrderNotFound() *OrderNotFound {
	return &OrderNotFound{}
}

/*OrderNotFound handles this case with default header values.

No such input on this node.
*/
type OrderNotFound struct {
}

func (o *OrderNotFound) Error() string {
	return fmt.Sprintf("[POST /system/inputs/{inputId}/extractors/order][%d] orderNotFound ", 404)
}

func (o *OrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
