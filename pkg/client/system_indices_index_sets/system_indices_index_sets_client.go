// Code generated by go-swagger; DO NOT EDIT.

package system_indices_index_sets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system indices index sets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system indices index sets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Rebuild rebuilds sync index range information

This triggers a systemjob that scans every index and stores meta information about what indices contain messages in what timeranges. It atomically overwrites already existing meta information.
*/
func (a *Client) Rebuild(params *RebuildParams, authInfo runtime.ClientAuthInfoWriter) (*RebuildOK, *RebuildAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rebuild",
		Method:             "POST",
		PathPattern:        "/system/indices/ranges/rebuild",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RebuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RebuildOK:
		return value, nil, nil
	case *RebuildAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RebuildIndex rebuilds sync index range information

This triggers a system job that scans an index and stores meta information about what indices contain messages in what time ranges. It atomically overwrites already existing meta information.
*/
func (a *Client) RebuildIndex(params *RebuildIndexParams, authInfo runtime.ClientAuthInfoWriter) (*RebuildIndexOK, *RebuildIndexAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebuildIndexParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rebuildIndex",
		Method:             "POST",
		PathPattern:        "/system/indices/ranges/{index: [a-z_0-9-]+}/rebuild",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RebuildIndexReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RebuildIndexOK:
		return value, nil, nil
	case *RebuildIndexAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RebuildIndexSet rebuilds sync index range information for the given index set

This triggers a systemjob that scans every index in the given index set and stores meta information about what indices contain messages in what timeranges. It atomically overwrites already existing meta information.
*/
func (a *Client) RebuildIndexSet(params *RebuildIndexSetParams, authInfo runtime.ClientAuthInfoWriter) (*RebuildIndexSetOK, *RebuildIndexSetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebuildIndexSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rebuildIndexSet",
		Method:             "POST",
		PathPattern:        "/system/indices/ranges/index_set/{indexSetId}/rebuild",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RebuildIndexSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RebuildIndexSetOK:
		return value, nil, nil
	case *RebuildIndexSetAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
