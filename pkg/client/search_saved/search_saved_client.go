// Code generated by go-swagger; DO NOT EDIT.

package search_saved

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new search saved API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for search saved API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ExportSearchRelativeChunked exports message search with relative timerange

Search for messages in a relative timerange, specified as seconds from now. Example: 300 means search from 5 minutes ago to now.
*/
func (a *Client) ExportSearchRelativeChunked(params *ExportSearchRelativeChunkedParams, authInfo runtime.ClientAuthInfoWriter) (*ExportSearchRelativeChunkedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportSearchRelativeChunkedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportSearchRelativeChunked",
		Method:             "GET",
		PathPattern:        "/search/universal/relative/export",
		ProducesMediaTypes: []string{"text/csv"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportSearchRelativeChunkedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportSearchRelativeChunkedOK), nil

}

/*
FieldHistogramRelative fields value histogram of a query using a relative timerange
*/
func (a *Client) FieldHistogramRelative(params *FieldHistogramRelativeParams, authInfo runtime.ClientAuthInfoWriter) (*FieldHistogramRelativeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFieldHistogramRelativeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fieldHistogramRelative",
		Method:             "GET",
		PathPattern:        "/search/universal/relative/fieldhistogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FieldHistogramRelativeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FieldHistogramRelativeOK), nil

}

/*
HistogramRelative datetimes histogram of a query using a relative timerange
*/
func (a *Client) HistogramRelative(params *HistogramRelativeParams, authInfo runtime.ClientAuthInfoWriter) (*HistogramRelativeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHistogramRelativeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "histogramRelative",
		Method:             "GET",
		PathPattern:        "/search/universal/relative/histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HistogramRelativeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HistogramRelativeOK), nil

}

/*
SearchRelative messages search with relative timerange

Search for messages in a relative timerange, specified as seconds from now. Example: 300 means search from 5 minutes ago to now.
*/
func (a *Client) SearchRelative(params *SearchRelativeParams, authInfo runtime.ClientAuthInfoWriter) (*SearchRelativeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRelativeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchRelative",
		Method:             "GET",
		PathPattern:        "/search/universal/relative",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRelativeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchRelativeOK), nil

}

/*
StatsRelative fields statistics for a query using a relative timerange

Returns statistics like min/max or standard deviation of numeric fields over the whole query result set.
*/
func (a *Client) StatsRelative(params *StatsRelativeParams, authInfo runtime.ClientAuthInfoWriter) (*StatsRelativeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatsRelativeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statsRelative",
		Method:             "GET",
		PathPattern:        "/search/universal/relative/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatsRelativeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatsRelativeOK), nil

}

/*
TermsHistogramRelative mosts common field terms of a query over time using a relative timerange
*/
func (a *Client) TermsHistogramRelative(params *TermsHistogramRelativeParams, authInfo runtime.ClientAuthInfoWriter) (*TermsHistogramRelativeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTermsHistogramRelativeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "termsHistogramRelative",
		Method:             "GET",
		PathPattern:        "/search/universal/relative/terms-histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TermsHistogramRelativeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TermsHistogramRelativeOK), nil

}

/*
TermsRelative mosts common field terms of a query using a relative timerange
*/
func (a *Client) TermsRelative(params *TermsRelativeParams, authInfo runtime.ClientAuthInfoWriter) (*TermsRelativeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTermsRelativeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "termsRelative",
		Method:             "GET",
		PathPattern:        "/search/universal/relative/terms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TermsRelativeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TermsRelativeOK), nil

}

/*
TermsStatsRelative ordereds field terms of a query computed on another field using a relative timerange
*/
func (a *Client) TermsStatsRelative(params *TermsStatsRelativeParams, authInfo runtime.ClientAuthInfoWriter) (*TermsStatsRelativeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTermsStatsRelativeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "termsStatsRelative",
		Method:             "GET",
		PathPattern:        "/search/universal/relative/termsstats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TermsStatsRelativeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TermsStatsRelativeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
