// Code generated by go-swagger; DO NOT EDIT.

package search_saved

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTermsStatsRelativeParams creates a new TermsStatsRelativeParams object
// with the default values initialized.
func NewTermsStatsRelativeParams() *TermsStatsRelativeParams {
	var ()
	return &TermsStatsRelativeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTermsStatsRelativeParamsWithTimeout creates a new TermsStatsRelativeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTermsStatsRelativeParamsWithTimeout(timeout time.Duration) *TermsStatsRelativeParams {
	var ()
	return &TermsStatsRelativeParams{

		timeout: timeout,
	}
}

// NewTermsStatsRelativeParamsWithContext creates a new TermsStatsRelativeParams object
// with the default values initialized, and the ability to set a context for a request
func NewTermsStatsRelativeParamsWithContext(ctx context.Context) *TermsStatsRelativeParams {
	var ()
	return &TermsStatsRelativeParams{

		Context: ctx,
	}
}

// NewTermsStatsRelativeParamsWithHTTPClient creates a new TermsStatsRelativeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTermsStatsRelativeParamsWithHTTPClient(client *http.Client) *TermsStatsRelativeParams {
	var ()
	return &TermsStatsRelativeParams{
		HTTPClient: client,
	}
}

/*TermsStatsRelativeParams contains all the parameters to send to the API endpoint
for the terms stats relative operation typically these are written to a http.Request
*/
type TermsStatsRelativeParams struct {

	/*Filter
	  Filter

	*/
	Filter *string
	/*KeyField
	  Message field of to return terms of

	*/
	KeyField string
	/*Order
	  What to order on (Allowed values: TERM, REVERSE_TERM, COUNT, REVERSE_COUNT, TOTAL, REVERSE_TOTAL, MIN, REVERSE_MIN, MAX, REVERSE_MAX, MEAN, REVERSE_MEAN)

	*/
	Order string
	/*Query
	  Query (Lucene syntax)

	*/
	Query string
	/*Range
	  Relative timeframe to search in. See search method description.

	*/
	Range int64
	/*Size
	  Maximum number of terms to return

	*/
	Size *int64
	/*ValueField
	  Value field used for computation

	*/
	ValueField string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the terms stats relative params
func (o *TermsStatsRelativeParams) WithTimeout(timeout time.Duration) *TermsStatsRelativeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the terms stats relative params
func (o *TermsStatsRelativeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the terms stats relative params
func (o *TermsStatsRelativeParams) WithContext(ctx context.Context) *TermsStatsRelativeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the terms stats relative params
func (o *TermsStatsRelativeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the terms stats relative params
func (o *TermsStatsRelativeParams) WithHTTPClient(client *http.Client) *TermsStatsRelativeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the terms stats relative params
func (o *TermsStatsRelativeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the terms stats relative params
func (o *TermsStatsRelativeParams) WithFilter(filter *string) *TermsStatsRelativeParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the terms stats relative params
func (o *TermsStatsRelativeParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithKeyField adds the keyField to the terms stats relative params
func (o *TermsStatsRelativeParams) WithKeyField(keyField string) *TermsStatsRelativeParams {
	o.SetKeyField(keyField)
	return o
}

// SetKeyField adds the keyField to the terms stats relative params
func (o *TermsStatsRelativeParams) SetKeyField(keyField string) {
	o.KeyField = keyField
}

// WithOrder adds the order to the terms stats relative params
func (o *TermsStatsRelativeParams) WithOrder(order string) *TermsStatsRelativeParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the terms stats relative params
func (o *TermsStatsRelativeParams) SetOrder(order string) {
	o.Order = order
}

// WithQuery adds the query to the terms stats relative params
func (o *TermsStatsRelativeParams) WithQuery(query string) *TermsStatsRelativeParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the terms stats relative params
func (o *TermsStatsRelativeParams) SetQuery(query string) {
	o.Query = query
}

// WithRange adds the rangeVar to the terms stats relative params
func (o *TermsStatsRelativeParams) WithRange(rangeVar int64) *TermsStatsRelativeParams {
	o.SetRange(rangeVar)
	return o
}

// SetRange adds the range to the terms stats relative params
func (o *TermsStatsRelativeParams) SetRange(rangeVar int64) {
	o.Range = rangeVar
}

// WithSize adds the size to the terms stats relative params
func (o *TermsStatsRelativeParams) WithSize(size *int64) *TermsStatsRelativeParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the terms stats relative params
func (o *TermsStatsRelativeParams) SetSize(size *int64) {
	o.Size = size
}

// WithValueField adds the valueField to the terms stats relative params
func (o *TermsStatsRelativeParams) WithValueField(valueField string) *TermsStatsRelativeParams {
	o.SetValueField(valueField)
	return o
}

// SetValueField adds the valueField to the terms stats relative params
func (o *TermsStatsRelativeParams) SetValueField(valueField string) {
	o.ValueField = valueField
}

// WriteToRequest writes these params to a swagger request
func (o *TermsStatsRelativeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	// query param key_field
	qrKeyField := o.KeyField
	qKeyField := qrKeyField
	if qKeyField != "" {
		if err := r.SetQueryParam("key_field", qKeyField); err != nil {
			return err
		}
	}

	// query param order
	qrOrder := o.Order
	qOrder := qrOrder
	if qOrder != "" {
		if err := r.SetQueryParam("order", qOrder); err != nil {
			return err
		}
	}

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {
		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	// query param range
	qrRange := o.Range
	qRange := swag.FormatInt64(qrRange)
	if qRange != "" {
		if err := r.SetQueryParam("range", qRange); err != nil {
			return err
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int64
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	// query param value_field
	qrValueField := o.ValueField
	qValueField := qrValueField
	if qValueField != "" {
		if err := r.SetQueryParam("value_field", qValueField); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
