// Code generated by go-swagger; DO NOT EDIT.

package search_universal_relative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ExportSearchKeywordChunkedReader is a Reader for the ExportSearchKeywordChunked structure.
type ExportSearchKeywordChunkedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportSearchKeywordChunkedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewExportSearchKeywordChunkedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewExportSearchKeywordChunkedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewExportSearchKeywordChunkedOK creates a ExportSearchKeywordChunkedOK with default headers values
func NewExportSearchKeywordChunkedOK() *ExportSearchKeywordChunkedOK {
	return &ExportSearchKeywordChunkedOK{}
}

/*ExportSearchKeywordChunkedOK handles this case with default header values.

No response was specified
*/
type ExportSearchKeywordChunkedOK struct {
}

func (o *ExportSearchKeywordChunkedOK) Error() string {
	return fmt.Sprintf("[GET /search/universal/keyword/export][%d] exportSearchKeywordChunkedOK ", 200)
}

func (o *ExportSearchKeywordChunkedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportSearchKeywordChunkedBadRequest creates a ExportSearchKeywordChunkedBadRequest with default headers values
func NewExportSearchKeywordChunkedBadRequest() *ExportSearchKeywordChunkedBadRequest {
	return &ExportSearchKeywordChunkedBadRequest{}
}

/*ExportSearchKeywordChunkedBadRequest handles this case with default header values.

Invalid keyword provided.
*/
type ExportSearchKeywordChunkedBadRequest struct {
}

func (o *ExportSearchKeywordChunkedBadRequest) Error() string {
	return fmt.Sprintf("[GET /search/universal/keyword/export][%d] exportSearchKeywordChunkedBadRequest ", 400)
}

func (o *ExportSearchKeywordChunkedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
