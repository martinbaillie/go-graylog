// Code generated by go-swagger; DO NOT EDIT.

package search_universal_relative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SearchKeywordChunkedReader is a Reader for the SearchKeywordChunked structure.
type SearchKeywordChunkedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchKeywordChunkedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSearchKeywordChunkedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSearchKeywordChunkedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSearchKeywordChunkedOK creates a SearchKeywordChunkedOK with default headers values
func NewSearchKeywordChunkedOK() *SearchKeywordChunkedOK {
	return &SearchKeywordChunkedOK{}
}

/*SearchKeywordChunkedOK handles this case with default header values.

No response was specified
*/
type SearchKeywordChunkedOK struct {
	Payload SearchKeywordChunkedOKBody
}

func (o *SearchKeywordChunkedOK) Error() string {
	return fmt.Sprintf("[GET /search/universal/keyword][%d] searchKeywordChunkedOK  %+v", 200, o.Payload)
}

func (o *SearchKeywordChunkedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchKeywordChunkedBadRequest creates a SearchKeywordChunkedBadRequest with default headers values
func NewSearchKeywordChunkedBadRequest() *SearchKeywordChunkedBadRequest {
	return &SearchKeywordChunkedBadRequest{}
}

/*SearchKeywordChunkedBadRequest handles this case with default header values.

Invalid keyword provided.
*/
type SearchKeywordChunkedBadRequest struct {
}

func (o *SearchKeywordChunkedBadRequest) Error() string {
	return fmt.Sprintf("[GET /search/universal/keyword][%d] searchKeywordChunkedBadRequest ", 400)
}

func (o *SearchKeywordChunkedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*SearchKeywordChunkedOKBody search keyword chunked o k body
swagger:model SearchKeywordChunkedOKBody
*/
type SearchKeywordChunkedOKBody interface{}
