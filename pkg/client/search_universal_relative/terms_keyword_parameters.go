// Code generated by go-swagger; DO NOT EDIT.

package search_universal_relative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTermsKeywordParams creates a new TermsKeywordParams object
// with the default values initialized.
func NewTermsKeywordParams() *TermsKeywordParams {
	var ()
	return &TermsKeywordParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTermsKeywordParamsWithTimeout creates a new TermsKeywordParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTermsKeywordParamsWithTimeout(timeout time.Duration) *TermsKeywordParams {
	var ()
	return &TermsKeywordParams{

		timeout: timeout,
	}
}

// NewTermsKeywordParamsWithContext creates a new TermsKeywordParams object
// with the default values initialized, and the ability to set a context for a request
func NewTermsKeywordParamsWithContext(ctx context.Context) *TermsKeywordParams {
	var ()
	return &TermsKeywordParams{

		Context: ctx,
	}
}

// NewTermsKeywordParamsWithHTTPClient creates a new TermsKeywordParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTermsKeywordParamsWithHTTPClient(client *http.Client) *TermsKeywordParams {
	var ()
	return &TermsKeywordParams{
		HTTPClient: client,
	}
}

/*TermsKeywordParams contains all the parameters to send to the API endpoint
for the terms keyword operation typically these are written to a http.Request
*/
type TermsKeywordParams struct {

	/*Field
	  Message field of to return terms of

	*/
	Field string
	/*Filter
	  Filter

	*/
	Filter *string
	/*Keyword
	  Range keyword

	*/
	Keyword string
	/*Order
	  Sorting (field:asc / field:desc)

	*/
	Order *string
	/*Query
	  Query (Lucene syntax)

	*/
	Query string
	/*Size
	  Maximum number of terms to return

	*/
	Size *int64
	/*StackedFields
	  Fields to stack

	*/
	StackedFields *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the terms keyword params
func (o *TermsKeywordParams) WithTimeout(timeout time.Duration) *TermsKeywordParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the terms keyword params
func (o *TermsKeywordParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the terms keyword params
func (o *TermsKeywordParams) WithContext(ctx context.Context) *TermsKeywordParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the terms keyword params
func (o *TermsKeywordParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the terms keyword params
func (o *TermsKeywordParams) WithHTTPClient(client *http.Client) *TermsKeywordParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the terms keyword params
func (o *TermsKeywordParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithField adds the field to the terms keyword params
func (o *TermsKeywordParams) WithField(field string) *TermsKeywordParams {
	o.SetField(field)
	return o
}

// SetField adds the field to the terms keyword params
func (o *TermsKeywordParams) SetField(field string) {
	o.Field = field
}

// WithFilter adds the filter to the terms keyword params
func (o *TermsKeywordParams) WithFilter(filter *string) *TermsKeywordParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the terms keyword params
func (o *TermsKeywordParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithKeyword adds the keyword to the terms keyword params
func (o *TermsKeywordParams) WithKeyword(keyword string) *TermsKeywordParams {
	o.SetKeyword(keyword)
	return o
}

// SetKeyword adds the keyword to the terms keyword params
func (o *TermsKeywordParams) SetKeyword(keyword string) {
	o.Keyword = keyword
}

// WithOrder adds the order to the terms keyword params
func (o *TermsKeywordParams) WithOrder(order *string) *TermsKeywordParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the terms keyword params
func (o *TermsKeywordParams) SetOrder(order *string) {
	o.Order = order
}

// WithQuery adds the query to the terms keyword params
func (o *TermsKeywordParams) WithQuery(query string) *TermsKeywordParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the terms keyword params
func (o *TermsKeywordParams) SetQuery(query string) {
	o.Query = query
}

// WithSize adds the size to the terms keyword params
func (o *TermsKeywordParams) WithSize(size *int64) *TermsKeywordParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the terms keyword params
func (o *TermsKeywordParams) SetSize(size *int64) {
	o.Size = size
}

// WithStackedFields adds the stackedFields to the terms keyword params
func (o *TermsKeywordParams) WithStackedFields(stackedFields *string) *TermsKeywordParams {
	o.SetStackedFields(stackedFields)
	return o
}

// SetStackedFields adds the stackedFields to the terms keyword params
func (o *TermsKeywordParams) SetStackedFields(stackedFields *string) {
	o.StackedFields = stackedFields
}

// WriteToRequest writes these params to a swagger request
func (o *TermsKeywordParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param field
	qrField := o.Field
	qField := qrField
	if qField != "" {
		if err := r.SetQueryParam("field", qField); err != nil {
			return err
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	// query param keyword
	qrKeyword := o.Keyword
	qKeyword := qrKeyword
	if qKeyword != "" {
		if err := r.SetQueryParam("keyword", qKeyword); err != nil {
			return err
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {
		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int64
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	if o.StackedFields != nil {

		// query param stacked_fields
		var qrStackedFields string
		if o.StackedFields != nil {
			qrStackedFields = *o.StackedFields
		}
		qStackedFields := qrStackedFields
		if qStackedFields != "" {
			if err := r.SetQueryParam("stacked_fields", qStackedFields); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
