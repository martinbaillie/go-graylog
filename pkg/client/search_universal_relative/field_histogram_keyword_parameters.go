// Code generated by go-swagger; DO NOT EDIT.

package search_universal_relative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFieldHistogramKeywordParams creates a new FieldHistogramKeywordParams object
// with the default values initialized.
func NewFieldHistogramKeywordParams() *FieldHistogramKeywordParams {
	var ()
	return &FieldHistogramKeywordParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFieldHistogramKeywordParamsWithTimeout creates a new FieldHistogramKeywordParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFieldHistogramKeywordParamsWithTimeout(timeout time.Duration) *FieldHistogramKeywordParams {
	var ()
	return &FieldHistogramKeywordParams{

		timeout: timeout,
	}
}

// NewFieldHistogramKeywordParamsWithContext creates a new FieldHistogramKeywordParams object
// with the default values initialized, and the ability to set a context for a request
func NewFieldHistogramKeywordParamsWithContext(ctx context.Context) *FieldHistogramKeywordParams {
	var ()
	return &FieldHistogramKeywordParams{

		Context: ctx,
	}
}

// NewFieldHistogramKeywordParamsWithHTTPClient creates a new FieldHistogramKeywordParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFieldHistogramKeywordParamsWithHTTPClient(client *http.Client) *FieldHistogramKeywordParams {
	var ()
	return &FieldHistogramKeywordParams{
		HTTPClient: client,
	}
}

/*FieldHistogramKeywordParams contains all the parameters to send to the API endpoint
for the field histogram keyword operation typically these are written to a http.Request
*/
type FieldHistogramKeywordParams struct {

	/*Cardinality
	  Calculate the cardinality of the field as well

	*/
	Cardinality *bool
	/*Field
	  Field of whose values to get the histogram of

	*/
	Field string
	/*Filter
	  Filter

	*/
	Filter *string
	/*Interval
	  Histogram interval / bucket size. (year, quarter, month, week, day, hour or minute)

	*/
	Interval string
	/*Keyword
	  Range keyword

	*/
	Keyword string
	/*Query
	  Query (Lucene syntax)

	*/
	Query string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the field histogram keyword params
func (o *FieldHistogramKeywordParams) WithTimeout(timeout time.Duration) *FieldHistogramKeywordParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the field histogram keyword params
func (o *FieldHistogramKeywordParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the field histogram keyword params
func (o *FieldHistogramKeywordParams) WithContext(ctx context.Context) *FieldHistogramKeywordParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the field histogram keyword params
func (o *FieldHistogramKeywordParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the field histogram keyword params
func (o *FieldHistogramKeywordParams) WithHTTPClient(client *http.Client) *FieldHistogramKeywordParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the field histogram keyword params
func (o *FieldHistogramKeywordParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCardinality adds the cardinality to the field histogram keyword params
func (o *FieldHistogramKeywordParams) WithCardinality(cardinality *bool) *FieldHistogramKeywordParams {
	o.SetCardinality(cardinality)
	return o
}

// SetCardinality adds the cardinality to the field histogram keyword params
func (o *FieldHistogramKeywordParams) SetCardinality(cardinality *bool) {
	o.Cardinality = cardinality
}

// WithField adds the field to the field histogram keyword params
func (o *FieldHistogramKeywordParams) WithField(field string) *FieldHistogramKeywordParams {
	o.SetField(field)
	return o
}

// SetField adds the field to the field histogram keyword params
func (o *FieldHistogramKeywordParams) SetField(field string) {
	o.Field = field
}

// WithFilter adds the filter to the field histogram keyword params
func (o *FieldHistogramKeywordParams) WithFilter(filter *string) *FieldHistogramKeywordParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the field histogram keyword params
func (o *FieldHistogramKeywordParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithInterval adds the interval to the field histogram keyword params
func (o *FieldHistogramKeywordParams) WithInterval(interval string) *FieldHistogramKeywordParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the field histogram keyword params
func (o *FieldHistogramKeywordParams) SetInterval(interval string) {
	o.Interval = interval
}

// WithKeyword adds the keyword to the field histogram keyword params
func (o *FieldHistogramKeywordParams) WithKeyword(keyword string) *FieldHistogramKeywordParams {
	o.SetKeyword(keyword)
	return o
}

// SetKeyword adds the keyword to the field histogram keyword params
func (o *FieldHistogramKeywordParams) SetKeyword(keyword string) {
	o.Keyword = keyword
}

// WithQuery adds the query to the field histogram keyword params
func (o *FieldHistogramKeywordParams) WithQuery(query string) *FieldHistogramKeywordParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the field histogram keyword params
func (o *FieldHistogramKeywordParams) SetQuery(query string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *FieldHistogramKeywordParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cardinality != nil {

		// query param cardinality
		var qrCardinality bool
		if o.Cardinality != nil {
			qrCardinality = *o.Cardinality
		}
		qCardinality := swag.FormatBool(qrCardinality)
		if qCardinality != "" {
			if err := r.SetQueryParam("cardinality", qCardinality); err != nil {
				return err
			}
		}

	}

	// query param field
	qrField := o.Field
	qField := qrField
	if qField != "" {
		if err := r.SetQueryParam("field", qField); err != nil {
			return err
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	// query param interval
	qrInterval := o.Interval
	qInterval := qrInterval
	if qInterval != "" {
		if err := r.SetQueryParam("interval", qInterval); err != nil {
			return err
		}
	}

	// query param keyword
	qrKeyword := o.Keyword
	qKeyword := qrKeyword
	if qKeyword != "" {
		if err := r.SetQueryParam("keyword", qKeyword); err != nil {
			return err
		}
	}

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {
		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
