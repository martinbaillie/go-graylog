// Code generated by go-swagger; DO NOT EDIT.

package search_universal_relative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new search universal relative API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for search universal relative API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ExportSearchKeywordChunked exports message search with keyword as timerange

Search for messages in a timerange defined by a keyword like "yesterday" or "2 weeks ago to wednesday".
*/
func (a *Client) ExportSearchKeywordChunked(params *ExportSearchKeywordChunkedParams, authInfo runtime.ClientAuthInfoWriter) (*ExportSearchKeywordChunkedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportSearchKeywordChunkedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportSearchKeywordChunked",
		Method:             "GET",
		PathPattern:        "/search/universal/keyword/export",
		ProducesMediaTypes: []string{"text/csv"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportSearchKeywordChunkedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportSearchKeywordChunkedOK), nil

}

/*
FieldHistogramKeyword datetimes histogram of a query using keyword timerange
*/
func (a *Client) FieldHistogramKeyword(params *FieldHistogramKeywordParams, authInfo runtime.ClientAuthInfoWriter) (*FieldHistogramKeywordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFieldHistogramKeywordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fieldHistogramKeyword",
		Method:             "GET",
		PathPattern:        "/search/universal/keyword/fieldhistogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FieldHistogramKeywordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FieldHistogramKeywordOK), nil

}

/*
HistogramKeyword datetimes histogram of a query using keyword timerange
*/
func (a *Client) HistogramKeyword(params *HistogramKeywordParams, authInfo runtime.ClientAuthInfoWriter) (*HistogramKeywordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHistogramKeywordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "histogramKeyword",
		Method:             "GET",
		PathPattern:        "/search/universal/keyword/histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HistogramKeywordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HistogramKeywordOK), nil

}

/*
SearchKeyword messages search with keyword as timerange

Search for messages in a timerange defined by a keyword like "yesterday" or "2 weeks ago to wednesday".
*/
func (a *Client) SearchKeyword(params *SearchKeywordParams, authInfo runtime.ClientAuthInfoWriter) (*SearchKeywordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchKeywordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchKeyword",
		Method:             "GET",
		PathPattern:        "/search/universal/keyword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchKeywordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchKeywordOK), nil

}

/*
StatsKeyword fields statistics for a query using a keyword timerange

Returns statistics like min/max or standard deviation of numeric fields over the whole query result set.
*/
func (a *Client) StatsKeyword(params *StatsKeywordParams, authInfo runtime.ClientAuthInfoWriter) (*StatsKeywordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatsKeywordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statsKeyword",
		Method:             "GET",
		PathPattern:        "/search/universal/keyword/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatsKeywordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatsKeywordOK), nil

}

/*
TermsKeyword mosts common field terms of a query using a keyword timerange
*/
func (a *Client) TermsKeyword(params *TermsKeywordParams, authInfo runtime.ClientAuthInfoWriter) (*TermsKeywordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTermsKeywordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "termsKeyword",
		Method:             "GET",
		PathPattern:        "/search/universal/keyword/terms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TermsKeywordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TermsKeywordOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
