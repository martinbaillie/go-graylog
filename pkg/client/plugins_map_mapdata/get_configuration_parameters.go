// Code generated by go-swagger; DO NOT EDIT.

package plugins_map_mapdata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetConfigurationParams creates a new GetConfigurationParams object
// with the default values initialized.
func NewGetConfigurationParams() *GetConfigurationParams {
	var ()
	return &GetConfigurationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetConfigurationParamsWithTimeout creates a new GetConfigurationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetConfigurationParamsWithTimeout(timeout time.Duration) *GetConfigurationParams {
	var ()
	return &GetConfigurationParams{

		timeout: timeout,
	}
}

// NewGetConfigurationParamsWithContext creates a new GetConfigurationParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetConfigurationParamsWithContext(ctx context.Context) *GetConfigurationParams {
	var ()
	return &GetConfigurationParams{

		Context: ctx,
	}
}

// NewGetConfigurationParamsWithHTTPClient creates a new GetConfigurationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetConfigurationParamsWithHTTPClient(client *http.Client) *GetConfigurationParams {
	var ()
	return &GetConfigurationParams{
		HTTPClient: client,
	}
}

/*GetConfigurationParams contains all the parameters to send to the API endpoint
for the get configuration operation typically these are written to a http.Request
*/
type GetConfigurationParams struct {

	/*CollectorID*/
	CollectorID string
	/*Tags*/
	Tags *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get configuration params
func (o *GetConfigurationParams) WithTimeout(timeout time.Duration) *GetConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get configuration params
func (o *GetConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get configuration params
func (o *GetConfigurationParams) WithContext(ctx context.Context) *GetConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get configuration params
func (o *GetConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get configuration params
func (o *GetConfigurationParams) WithHTTPClient(client *http.Client) *GetConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get configuration params
func (o *GetConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollectorID adds the collectorID to the get configuration params
func (o *GetConfigurationParams) WithCollectorID(collectorID string) *GetConfigurationParams {
	o.SetCollectorID(collectorID)
	return o
}

// SetCollectorID adds the collectorId to the get configuration params
func (o *GetConfigurationParams) SetCollectorID(collectorID string) {
	o.CollectorID = collectorID
}

// WithTags adds the tags to the get configuration params
func (o *GetConfigurationParams) WithTags(tags *string) *GetConfigurationParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get configuration params
func (o *GetConfigurationParams) SetTags(tags *string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *GetConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param collectorId
	if err := r.SetPathParam("collectorId", o.CollectorID); err != nil {
		return err
	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
