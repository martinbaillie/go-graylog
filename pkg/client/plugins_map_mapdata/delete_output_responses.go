// Code generated by go-swagger; DO NOT EDIT.

package plugins_map_mapdata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteOutputReader is a Reader for the DeleteOutput structure.
type DeleteOutputReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteOutputReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteOutputOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteOutputBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteOutputNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteOutputPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteOutputOK creates a DeleteOutputOK with default headers values
func NewDeleteOutputOK() *DeleteOutputOK {
	return &DeleteOutputOK{}
}

/*DeleteOutputOK handles this case with default header values.

No response was specified
*/
type DeleteOutputOK struct {
}

func (o *DeleteOutputOK) Error() string {
	return fmt.Sprintf("[DELETE /plugins/org.graylog.plugins.collector/configurations/{id}/outputs/{outputId}][%d] deleteOutputOK ", 200)
}

func (o *DeleteOutputOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteOutputBadRequest creates a DeleteOutputBadRequest with default headers values
func NewDeleteOutputBadRequest() *DeleteOutputBadRequest {
	return &DeleteOutputBadRequest{}
}

/*DeleteOutputBadRequest handles this case with default header values.

Invalid ObjectId.
*/
type DeleteOutputBadRequest struct {
}

func (o *DeleteOutputBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /plugins/org.graylog.plugins.collector/configurations/{id}/outputs/{outputId}][%d] deleteOutputBadRequest ", 400)
}

func (o *DeleteOutputBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteOutputNotFound creates a DeleteOutputNotFound with default headers values
func NewDeleteOutputNotFound() *DeleteOutputNotFound {
	return &DeleteOutputNotFound{}
}

/*DeleteOutputNotFound handles this case with default header values.

Configuration or Output not found.
*/
type DeleteOutputNotFound struct {
}

func (o *DeleteOutputNotFound) Error() string {
	return fmt.Sprintf("[DELETE /plugins/org.graylog.plugins.collector/configurations/{id}/outputs/{outputId}][%d] deleteOutputNotFound ", 404)
}

func (o *DeleteOutputNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteOutputPreconditionFailed creates a DeleteOutputPreconditionFailed with default headers values
func NewDeleteOutputPreconditionFailed() *DeleteOutputPreconditionFailed {
	return &DeleteOutputPreconditionFailed{}
}

/*DeleteOutputPreconditionFailed handles this case with default header values.

Still inputs assigned to output
*/
type DeleteOutputPreconditionFailed struct {
}

func (o *DeleteOutputPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /plugins/org.graylog.plugins.collector/configurations/{id}/outputs/{outputId}][%d] deleteOutputPreconditionFailed ", 412)
}

func (o *DeleteOutputPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
