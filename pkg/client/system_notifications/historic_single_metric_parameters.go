// Code generated by go-swagger; DO NOT EDIT.

package system_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewHistoricSingleMetricParams creates a new HistoricSingleMetricParams object
// with the default values initialized.
func NewHistoricSingleMetricParams() *HistoricSingleMetricParams {
	var (
		afterDefault = int64(-1)
	)
	return &HistoricSingleMetricParams{
		After: &afterDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewHistoricSingleMetricParamsWithTimeout creates a new HistoricSingleMetricParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHistoricSingleMetricParamsWithTimeout(timeout time.Duration) *HistoricSingleMetricParams {
	var (
		afterDefault = int64(-1)
	)
	return &HistoricSingleMetricParams{
		After: &afterDefault,

		timeout: timeout,
	}
}

// NewHistoricSingleMetricParamsWithContext creates a new HistoricSingleMetricParams object
// with the default values initialized, and the ability to set a context for a request
func NewHistoricSingleMetricParamsWithContext(ctx context.Context) *HistoricSingleMetricParams {
	var (
		afterDefault = int64(-1)
	)
	return &HistoricSingleMetricParams{
		After: &afterDefault,

		Context: ctx,
	}
}

// NewHistoricSingleMetricParamsWithHTTPClient creates a new HistoricSingleMetricParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHistoricSingleMetricParamsWithHTTPClient(client *http.Client) *HistoricSingleMetricParams {
	var (
		afterDefault = int64(-1)
	)
	return &HistoricSingleMetricParams{
		After:      &afterDefault,
		HTTPClient: client,
	}
}

/*HistoricSingleMetricParams contains all the parameters to send to the API endpoint
for the historic single metric operation typically these are written to a http.Request
*/
type HistoricSingleMetricParams struct {

	/*After
	  Only values for after this UTC timestamp (1970 epoch)

	*/
	After *int64
	/*MetricName*/
	MetricName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the historic single metric params
func (o *HistoricSingleMetricParams) WithTimeout(timeout time.Duration) *HistoricSingleMetricParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the historic single metric params
func (o *HistoricSingleMetricParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the historic single metric params
func (o *HistoricSingleMetricParams) WithContext(ctx context.Context) *HistoricSingleMetricParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the historic single metric params
func (o *HistoricSingleMetricParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the historic single metric params
func (o *HistoricSingleMetricParams) WithHTTPClient(client *http.Client) *HistoricSingleMetricParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the historic single metric params
func (o *HistoricSingleMetricParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the historic single metric params
func (o *HistoricSingleMetricParams) WithAfter(after *int64) *HistoricSingleMetricParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the historic single metric params
func (o *HistoricSingleMetricParams) SetAfter(after *int64) {
	o.After = after
}

// WithMetricName adds the metricName to the historic single metric params
func (o *HistoricSingleMetricParams) WithMetricName(metricName string) *HistoricSingleMetricParams {
	o.SetMetricName(metricName)
	return o
}

// SetMetricName adds the metricName to the historic single metric params
func (o *HistoricSingleMetricParams) SetMetricName(metricName string) {
	o.MetricName = metricName
}

// WriteToRequest writes these params to a swagger request
func (o *HistoricSingleMetricParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter int64
		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := swag.FormatInt64(qrAfter)
		if qAfter != "" {
			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}

	}

	// path param metricName
	if err := r.SetPathParam("metricName", o.MetricName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
