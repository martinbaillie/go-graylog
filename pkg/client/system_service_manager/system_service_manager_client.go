// Code generated by go-swagger; DO NOT EDIT.

package system_service_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system service manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system service manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PauseProcessing pauses message processing

If the message journal is enabled, incoming messages will be spooled on disk, if it is disabled, you might lose messages from inputs which cannot buffer themselves, like AMQP or Kafka-based inputs.
*/
func (a *Client) PauseProcessing(params *PauseProcessingParams, authInfo runtime.ClientAuthInfoWriter) (*PauseProcessingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseProcessingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pauseProcessing",
		Method:             "PUT",
		PathPattern:        "/system/processing/pause",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PauseProcessingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PauseProcessingOK), nil

}

/*
ResumeProcessing resumes message processing
*/
func (a *Client) ResumeProcessing(params *ResumeProcessingParams, authInfo runtime.ClientAuthInfoWriter) (*ResumeProcessingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeProcessingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resumeProcessing",
		Method:             "PUT",
		PathPattern:        "/system/processing/resume",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResumeProcessingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResumeProcessingOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
