// Code generated by go-swagger; DO NOT EDIT.

package system_messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/martinbaillie/go-graylog/pkg/models"
)

// NewUpdateConfigParams creates a new UpdateConfigParams object
// with the default values initialized.
func NewUpdateConfigParams() *UpdateConfigParams {
	var ()
	return &UpdateConfigParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateConfigParamsWithTimeout creates a new UpdateConfigParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateConfigParamsWithTimeout(timeout time.Duration) *UpdateConfigParams {
	var ()
	return &UpdateConfigParams{

		timeout: timeout,
	}
}

// NewUpdateConfigParamsWithContext creates a new UpdateConfigParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateConfigParamsWithContext(ctx context.Context) *UpdateConfigParams {
	var ()
	return &UpdateConfigParams{

		Context: ctx,
	}
}

// NewUpdateConfigParamsWithHTTPClient creates a new UpdateConfigParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateConfigParamsWithHTTPClient(client *http.Client) *UpdateConfigParams {
	var ()
	return &UpdateConfigParams{
		HTTPClient: client,
	}
}

/*UpdateConfigParams contains all the parameters to send to the API endpoint
for the update config operation typically these are written to a http.Request
*/
type UpdateConfigParams struct {

	/*Config*/
	Config *models.MessageProcessorsConfigWithDescriptors

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update config params
func (o *UpdateConfigParams) WithTimeout(timeout time.Duration) *UpdateConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update config params
func (o *UpdateConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update config params
func (o *UpdateConfigParams) WithContext(ctx context.Context) *UpdateConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update config params
func (o *UpdateConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update config params
func (o *UpdateConfigParams) WithHTTPClient(client *http.Client) *UpdateConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update config params
func (o *UpdateConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConfig adds the config to the update config params
func (o *UpdateConfigParams) WithConfig(config *models.MessageProcessorsConfigWithDescriptors) *UpdateConfigParams {
	o.SetConfig(config)
	return o
}

// SetConfig adds the config to the update config params
func (o *UpdateConfigParams) SetConfig(config *models.MessageProcessorsConfigWithDescriptors) {
	o.Config = config
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Config != nil {
		if err := r.SetBodyParam(o.Config); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
