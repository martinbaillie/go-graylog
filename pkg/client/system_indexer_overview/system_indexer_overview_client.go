// Code generated by go-swagger; DO NOT EDIT.

package system_indexer_overview

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system indexer overview API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system indexer overview API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Close closes an index this will also trigger an index ranges rebuild job
*/
func (a *Client) Close(params *CloseParams, authInfo runtime.ClientAuthInfoWriter) (*CloseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "close",
		Method:             "POST",
		PathPattern:        "/system/indexer/indices/{index}/close",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CloseOK), nil

}

/*
Closed gets a list of closed indices that can be reopened
*/
func (a *Client) Closed(params *ClosedParams, authInfo runtime.ClientAuthInfoWriter) (*ClosedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClosedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "closed",
		Method:             "GET",
		PathPattern:        "/system/indexer/indices/closed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClosedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ClosedOK), nil

}

/*
IndexSetClosed gets a list of closed indices that can be reopened
*/
func (a *Client) IndexSetClosed(params *IndexSetClosedParams, authInfo runtime.ClientAuthInfoWriter) (*IndexSetClosedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexSetClosedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexSetClosed",
		Method:             "GET",
		PathPattern:        "/system/indexer/indices/{indexSetId}/closed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexSetClosedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexSetClosedOK), nil

}

/*
IndexSetList lists all open closed and reopened indices
*/
func (a *Client) IndexSetList(params *IndexSetListParams, authInfo runtime.ClientAuthInfoWriter) (*IndexSetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexSetListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexSetList",
		Method:             "GET",
		PathPattern:        "/system/indexer/indices/{indexSetId}/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexSetListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexSetListOK), nil

}

/*
IndexSetOpen gets information of all open indices managed by graylog and their shards
*/
func (a *Client) IndexSetOpen(params *IndexSetOpenParams, authInfo runtime.ClientAuthInfoWriter) (*IndexSetOpenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexSetOpenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexSetOpen",
		Method:             "GET",
		PathPattern:        "/system/indexer/indices/{indexSetId}/open",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexSetOpenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexSetOpenOK), nil

}

/*
IndexSetReopened gets a list of reopened indices which will not be cleaned by retention cleaning
*/
func (a *Client) IndexSetReopened(params *IndexSetReopenedParams, authInfo runtime.ClientAuthInfoWriter) (*IndexSetReopenedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexSetReopenedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexSetReopened",
		Method:             "GET",
		PathPattern:        "/system/indexer/indices/{indexSetId}/reopened",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexSetReopenedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IndexSetReopenedOK), nil

}

/*
Multiple gets information of all specified indices and their shards
*/
func (a *Client) Multiple(params *MultipleParams, authInfo runtime.ClientAuthInfoWriter) (*MultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultipleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multiple",
		Method:             "POST",
		PathPattern:        "/system/indexer/indices/multiple",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MultipleOK), nil

}

/*
Open gets information of all open indices managed by graylog and their shards
*/
func (a *Client) Open(params *OpenParams, authInfo runtime.ClientAuthInfoWriter) (*OpenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "open",
		Method:             "GET",
		PathPattern:        "/system/indexer/indices/open",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OpenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OpenOK), nil

}

/*
Reopen reopens a closed index this will also trigger an index ranges rebuild job
*/
func (a *Client) Reopen(params *ReopenParams, authInfo runtime.ClientAuthInfoWriter) (*ReopenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReopenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reopen",
		Method:             "POST",
		PathPattern:        "/system/indexer/indices/{index}/reopen",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReopenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReopenOK), nil

}

/*
Reopened gets a list of reopened indices which will not be cleaned by retention cleaning
*/
func (a *Client) Reopened(params *ReopenedParams, authInfo runtime.ClientAuthInfoWriter) (*ReopenedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReopenedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reopened",
		Method:             "GET",
		PathPattern:        "/system/indexer/indices/reopened",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReopenedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReopenedOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
