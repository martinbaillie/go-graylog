// Code generated by go-swagger; DO NOT EDIT.

package system_indexer_indices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/martinbaillie/go-graylog/pkg/models"
)

// CountReader is a Reader for the Count structure.
type CountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCountOK creates a CountOK with default headers values
func NewCountOK() *CountOK {
	return &CountOK{}
}

/*CountOK handles this case with default header values.

No response was specified
*/
type CountOK struct {
	Payload *models.FailureCount
}

func (o *CountOK) Error() string {
	return fmt.Sprintf("[GET /system/indexer/failures/count][%d] countOK  %+v", 200, o.Payload)
}

func (o *CountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FailureCount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCountBadRequest creates a CountBadRequest with default headers values
func NewCountBadRequest() *CountBadRequest {
	return &CountBadRequest{}
}

/*CountBadRequest handles this case with default header values.

Invalid date parameter provided.
*/
type CountBadRequest struct {
}

func (o *CountBadRequest) Error() string {
	return fmt.Sprintf("[GET /system/indexer/failures/count][%d] countBadRequest ", 400)
}

func (o *CountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
