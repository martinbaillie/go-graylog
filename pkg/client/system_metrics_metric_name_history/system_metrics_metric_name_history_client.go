// Code generated by go-swagger; DO NOT EDIT.

package system_metrics_metric_name_history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system metrics metric name history API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system metrics metric name history API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ByNamespace gets all metrics of a namespace
*/
func (a *Client) ByNamespace(params *ByNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*ByNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewByNamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "byNamespace",
		Method:             "GET",
		PathPattern:        "/system/metrics/namespace/{namespace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ByNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ByNamespaceOK), nil

}

/*
MetricNames gets all metrics keys names
*/
func (a *Client) MetricNames(params *MetricNamesParams, authInfo runtime.ClientAuthInfoWriter) (*MetricNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetricNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "metricNames",
		Method:             "GET",
		PathPattern:        "/system/metrics/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MetricNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MetricNamesOK), nil

}

/*
Metrics gets all metrics

Note that this might return a huge result set.
*/
func (a *Client) Metrics(params *MetricsParams, authInfo runtime.ClientAuthInfoWriter) (*MetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "metrics",
		Method:             "GET",
		PathPattern:        "/system/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MetricsOK), nil

}

/*
MultipleMetrics gets the values of multiple metrics at once
*/
func (a *Client) MultipleMetrics(params *MultipleMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*MultipleMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultipleMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multipleMetrics",
		Method:             "POST",
		PathPattern:        "/system/metrics/multiple",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultipleMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MultipleMetricsOK), nil

}

/*
SingleMetric gets a single metric
*/
func (a *Client) SingleMetric(params *SingleMetricParams, authInfo runtime.ClientAuthInfoWriter) (*SingleMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSingleMetricParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "singleMetric",
		Method:             "GET",
		PathPattern:        "/system/metrics/{metricName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SingleMetricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SingleMetricOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
