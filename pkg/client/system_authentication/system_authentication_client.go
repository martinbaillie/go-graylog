// Code generated by go-swagger; DO NOT EDIT.

package system_authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system authentication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system authentication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Jvm gets j VM information
*/
func (a *Client) Jvm(params *JvmParams, authInfo runtime.ClientAuthInfoWriter) (*JvmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJvmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jvm",
		Method:             "GET",
		PathPattern:        "/system/jvm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JvmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JvmOK), nil

}

/*
Locales gets supported locales
*/
func (a *Client) Locales(params *LocalesParams, authInfo runtime.ClientAuthInfoWriter) (*LocalesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "locales",
		Method:             "GET",
		PathPattern:        "/system/locales",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocalesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LocalesOK), nil

}

/*
System gets system overview
*/
func (a *Client) System(params *SystemParams, authInfo runtime.ClientAuthInfoWriter) (*SystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "system",
		Method:             "GET",
		PathPattern:        "/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SystemOK), nil

}

/*
Threaddump gets a thread dump
*/
func (a *Client) Threaddump(params *ThreaddumpParams, authInfo runtime.ClientAuthInfoWriter) (*ThreaddumpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThreaddumpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "threaddump",
		Method:             "GET",
		PathPattern:        "/system/threaddump",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThreaddumpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ThreaddumpOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
