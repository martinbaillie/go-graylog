// Code generated by go-swagger; DO NOT EDIT.

package system_cluster_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system cluster config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system cluster config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Node information about a node

This is returning information of a node in context to its state in the cluster. Use the system API of the node itself to get system information.
*/
func (a *Client) Node(params *NodeParams, authInfo runtime.ClientAuthInfoWriter) (*NodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "node",
		Method:             "GET",
		PathPattern:        "/system/cluster/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodeOK), nil

}

/*
Nodes lists all active nodes in this cluster
*/
func (a *Client) Nodes(params *NodesParams, authInfo runtime.ClientAuthInfoWriter) (*NodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodes",
		Method:             "GET",
		PathPattern:        "/system/cluster/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
