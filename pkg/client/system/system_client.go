// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CloneStream clones a stream
*/
func (a *Client) CloneStream(params *CloneStreamParams, authInfo runtime.ClientAuthInfoWriter) (*CloneStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cloneStream",
		Method:             "POST",
		PathPattern:        "/streams/{streamId}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CloneStreamOK), nil

}

/*
GetEnabled gets a list of all enabled streams
*/
func (a *Client) GetEnabled(params *GetEnabledParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnabled",
		Method:             "GET",
		PathPattern:        "/streams/enabled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnabledReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEnabledOK), nil

}

/*
Pause pauses a stream
*/
func (a *Client) Pause(params *PauseParams, authInfo runtime.ClientAuthInfoWriter) (*PauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pause",
		Method:             "POST",
		PathPattern:        "/streams/{streamId}/pause",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PauseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PauseOK), nil

}

/*
Resume resumes a stream
*/
func (a *Client) Resume(params *ResumeParams, authInfo runtime.ClientAuthInfoWriter) (*ResumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resume",
		Method:             "POST",
		PathPattern:        "/streams/{streamId}/resume",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResumeOK), nil

}

/*
TestMatch tests matching of a stream against a supplied message
*/
func (a *Client) TestMatch(params *TestMatchParams, authInfo runtime.ClientAuthInfoWriter) (*TestMatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestMatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testMatch",
		Method:             "POST",
		PathPattern:        "/streams/{streamId}/testMatch",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestMatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestMatchOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
