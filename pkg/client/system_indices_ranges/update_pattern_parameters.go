// Code generated by go-swagger; DO NOT EDIT.

package system_indices_ranges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/martinbaillie/go-graylog/pkg/models"
)

// NewUpdatePatternParams creates a new UpdatePatternParams object
// with the default values initialized.
func NewUpdatePatternParams() *UpdatePatternParams {
	var ()
	return &UpdatePatternParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdatePatternParamsWithTimeout creates a new UpdatePatternParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdatePatternParamsWithTimeout(timeout time.Duration) *UpdatePatternParams {
	var ()
	return &UpdatePatternParams{

		timeout: timeout,
	}
}

// NewUpdatePatternParamsWithContext creates a new UpdatePatternParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdatePatternParamsWithContext(ctx context.Context) *UpdatePatternParams {
	var ()
	return &UpdatePatternParams{

		Context: ctx,
	}
}

// NewUpdatePatternParamsWithHTTPClient creates a new UpdatePatternParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdatePatternParamsWithHTTPClient(client *http.Client) *UpdatePatternParams {
	var ()
	return &UpdatePatternParams{
		HTTPClient: client,
	}
}

/*UpdatePatternParams contains all the parameters to send to the API endpoint
for the update pattern operation typically these are written to a http.Request
*/
type UpdatePatternParams struct {

	/*Pattern*/
	Pattern *models.GrokPattern
	/*PatternID*/
	PatternID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update pattern params
func (o *UpdatePatternParams) WithTimeout(timeout time.Duration) *UpdatePatternParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update pattern params
func (o *UpdatePatternParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update pattern params
func (o *UpdatePatternParams) WithContext(ctx context.Context) *UpdatePatternParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update pattern params
func (o *UpdatePatternParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update pattern params
func (o *UpdatePatternParams) WithHTTPClient(client *http.Client) *UpdatePatternParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update pattern params
func (o *UpdatePatternParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPattern adds the pattern to the update pattern params
func (o *UpdatePatternParams) WithPattern(pattern *models.GrokPattern) *UpdatePatternParams {
	o.SetPattern(pattern)
	return o
}

// SetPattern adds the pattern to the update pattern params
func (o *UpdatePatternParams) SetPattern(pattern *models.GrokPattern) {
	o.Pattern = pattern
}

// WithPatternID adds the patternID to the update pattern params
func (o *UpdatePatternParams) WithPatternID(patternID string) *UpdatePatternParams {
	o.SetPatternID(patternID)
	return o
}

// SetPatternID adds the patternId to the update pattern params
func (o *UpdatePatternParams) SetPatternID(patternID string) {
	o.PatternID = patternID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdatePatternParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Pattern != nil {
		if err := r.SetBodyParam(o.Pattern); err != nil {
			return err
		}
	}

	// path param patternId
	if err := r.SetPathParam("patternId", o.PatternID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
