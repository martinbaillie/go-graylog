// Code generated by go-swagger; DO NOT EDIT.

package system_lookup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SetSubsystemLoggerLevelReader is a Reader for the SetSubsystemLoggerLevel structure.
type SetSubsystemLoggerLevelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetSubsystemLoggerLevelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSetSubsystemLoggerLevelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewSetSubsystemLoggerLevelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetSubsystemLoggerLevelOK creates a SetSubsystemLoggerLevelOK with default headers values
func NewSetSubsystemLoggerLevelOK() *SetSubsystemLoggerLevelOK {
	return &SetSubsystemLoggerLevelOK{}
}

/*SetSubsystemLoggerLevelOK handles this case with default header values.

No response was specified
*/
type SetSubsystemLoggerLevelOK struct {
}

func (o *SetSubsystemLoggerLevelOK) Error() string {
	return fmt.Sprintf("[PUT /system/loggers/subsystems/{subsystem}/level/{level}][%d] setSubsystemLoggerLevelOK ", 200)
}

func (o *SetSubsystemLoggerLevelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetSubsystemLoggerLevelNotFound creates a SetSubsystemLoggerLevelNotFound with default headers values
func NewSetSubsystemLoggerLevelNotFound() *SetSubsystemLoggerLevelNotFound {
	return &SetSubsystemLoggerLevelNotFound{}
}

/*SetSubsystemLoggerLevelNotFound handles this case with default header values.

No such subsystem.
*/
type SetSubsystemLoggerLevelNotFound struct {
}

func (o *SetSubsystemLoggerLevelNotFound) Error() string {
	return fmt.Sprintf("[PUT /system/loggers/subsystems/{subsystem}/level/{level}][%d] setSubsystemLoggerLevelNotFound ", 404)
}

func (o *SetSubsystemLoggerLevelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
