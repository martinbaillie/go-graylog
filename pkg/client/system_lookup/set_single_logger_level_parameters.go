// Code generated by go-swagger; DO NOT EDIT.

package system_lookup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetSingleLoggerLevelParams creates a new SetSingleLoggerLevelParams object
// with the default values initialized.
func NewSetSingleLoggerLevelParams() *SetSingleLoggerLevelParams {
	var ()
	return &SetSingleLoggerLevelParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetSingleLoggerLevelParamsWithTimeout creates a new SetSingleLoggerLevelParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetSingleLoggerLevelParamsWithTimeout(timeout time.Duration) *SetSingleLoggerLevelParams {
	var ()
	return &SetSingleLoggerLevelParams{

		timeout: timeout,
	}
}

// NewSetSingleLoggerLevelParamsWithContext creates a new SetSingleLoggerLevelParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetSingleLoggerLevelParamsWithContext(ctx context.Context) *SetSingleLoggerLevelParams {
	var ()
	return &SetSingleLoggerLevelParams{

		Context: ctx,
	}
}

// NewSetSingleLoggerLevelParamsWithHTTPClient creates a new SetSingleLoggerLevelParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetSingleLoggerLevelParamsWithHTTPClient(client *http.Client) *SetSingleLoggerLevelParams {
	var ()
	return &SetSingleLoggerLevelParams{
		HTTPClient: client,
	}
}

/*SetSingleLoggerLevelParams contains all the parameters to send to the API endpoint
for the set single logger level operation typically these are written to a http.Request
*/
type SetSingleLoggerLevelParams struct {

	/*Level*/
	Level string
	/*LoggerName*/
	LoggerName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set single logger level params
func (o *SetSingleLoggerLevelParams) WithTimeout(timeout time.Duration) *SetSingleLoggerLevelParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set single logger level params
func (o *SetSingleLoggerLevelParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set single logger level params
func (o *SetSingleLoggerLevelParams) WithContext(ctx context.Context) *SetSingleLoggerLevelParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set single logger level params
func (o *SetSingleLoggerLevelParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set single logger level params
func (o *SetSingleLoggerLevelParams) WithHTTPClient(client *http.Client) *SetSingleLoggerLevelParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set single logger level params
func (o *SetSingleLoggerLevelParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLevel adds the level to the set single logger level params
func (o *SetSingleLoggerLevelParams) WithLevel(level string) *SetSingleLoggerLevelParams {
	o.SetLevel(level)
	return o
}

// SetLevel adds the level to the set single logger level params
func (o *SetSingleLoggerLevelParams) SetLevel(level string) {
	o.Level = level
}

// WithLoggerName adds the loggerName to the set single logger level params
func (o *SetSingleLoggerLevelParams) WithLoggerName(loggerName string) *SetSingleLoggerLevelParams {
	o.SetLoggerName(loggerName)
	return o
}

// SetLoggerName adds the loggerName to the set single logger level params
func (o *SetSingleLoggerLevelParams) SetLoggerName(loggerName string) {
	o.LoggerName = loggerName
}

// WriteToRequest writes these params to a swagger request
func (o *SetSingleLoggerLevelParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param level
	if err := r.SetPathParam("level", o.Level); err != nil {
		return err
	}

	// path param loggerName
	if err := r.SetPathParam("loggerName", o.LoggerName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
