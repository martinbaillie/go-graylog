// Code generated by go-swagger; DO NOT EDIT.

package system_lookup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system lookup API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system lookup API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Loggers lists all loggers and their current levels
*/
func (a *Client) Loggers(params *LoggersParams, authInfo runtime.ClientAuthInfoWriter) (*LoggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoggersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loggers",
		Method:             "GET",
		PathPattern:        "/system/loggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoggersOK), nil

}

/*
Messages gets recent internal log messages
*/
func (a *Client) Messages(params *MessagesParams, authInfo runtime.ClientAuthInfoWriter) (*MessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "messages",
		Method:             "GET",
		PathPattern:        "/system/loggers/messages/recent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MessagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MessagesOK), nil

}

/*
SetSingleLoggerLevel sets the loglevel of a single logger

Provided level is falling back to DEBUG if it does not exist
*/
func (a *Client) SetSingleLoggerLevel(params *SetSingleLoggerLevelParams, authInfo runtime.ClientAuthInfoWriter) (*SetSingleLoggerLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSingleLoggerLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setSingleLoggerLevel",
		Method:             "PUT",
		PathPattern:        "/system/loggers/{loggerName}/level/{level}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetSingleLoggerLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetSingleLoggerLevelOK), nil

}

/*
SetSubsystemLoggerLevel sets the loglevel of a whole subsystem

Provided level is falling back to DEBUG if it does not exist
*/
func (a *Client) SetSubsystemLoggerLevel(params *SetSubsystemLoggerLevelParams, authInfo runtime.ClientAuthInfoWriter) (*SetSubsystemLoggerLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSubsystemLoggerLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setSubsystemLoggerLevel",
		Method:             "PUT",
		PathPattern:        "/system/loggers/subsystems/{subsystem}/level/{level}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetSubsystemLoggerLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetSubsystemLoggerLevelOK), nil

}

/*
Subsystems lists all logger subsystems and their current levels
*/
func (a *Client) Subsystems(params *SubsystemsParams, authInfo runtime.ClientAuthInfoWriter) (*SubsystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubsystemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subsystems",
		Method:             "GET",
		PathPattern:        "/system/loggers/subsystems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubsystemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubsystemsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
