// Code generated by go-swagger; DO NOT EDIT.

package plugins_system_pipelines_simulate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/martinbaillie/go-graylog/pkg/models"
)

// NewParseParams creates a new ParseParams object
// with the default values initialized.
func NewParseParams() *ParseParams {
	var ()
	return &ParseParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewParseParamsWithTimeout creates a new ParseParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewParseParamsWithTimeout(timeout time.Duration) *ParseParams {
	var ()
	return &ParseParams{

		timeout: timeout,
	}
}

// NewParseParamsWithContext creates a new ParseParams object
// with the default values initialized, and the ability to set a context for a request
func NewParseParamsWithContext(ctx context.Context) *ParseParams {
	var ()
	return &ParseParams{

		Context: ctx,
	}
}

// NewParseParamsWithHTTPClient creates a new ParseParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewParseParamsWithHTTPClient(client *http.Client) *ParseParams {
	var ()
	return &ParseParams{
		HTTPClient: client,
	}
}

/*ParseParams contains all the parameters to send to the API endpoint
for the parse operation typically these are written to a http.Request
*/
type ParseParams struct {

	/*Rule*/
	Rule *models.RuleSource

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the parse params
func (o *ParseParams) WithTimeout(timeout time.Duration) *ParseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the parse params
func (o *ParseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the parse params
func (o *ParseParams) WithContext(ctx context.Context) *ParseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the parse params
func (o *ParseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the parse params
func (o *ParseParams) WithHTTPClient(client *http.Client) *ParseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the parse params
func (o *ParseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRule adds the rule to the parse params
func (o *ParseParams) WithRule(rule *models.RuleSource) *ParseParams {
	o.SetRule(rule)
	return o
}

// SetRule adds the rule to the parse params
func (o *ParseParams) SetRule(rule *models.RuleSource) {
	o.Rule = rule
}

// WriteToRequest writes these params to a swagger request
func (o *ParseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Rule != nil {
		if err := r.SetBodyParam(o.Rule); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
