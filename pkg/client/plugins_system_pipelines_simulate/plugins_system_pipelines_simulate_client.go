// Code generated by go-swagger; DO NOT EDIT.

package plugins_system_pipelines_simulate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new plugins org graylog plugins pipelineprocessor system pipelines simulate API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plugins org graylog plugins pipelineprocessor system pipelines simulate API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateFromParser creates a processing rule from source
*/
func (a *Client) CreateFromParser(params *CreateFromParserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFromParserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFromParserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFromParser",
		Method:             "POST",
		PathPattern:        "/plugins/org.graylog.plugins.pipelineprocessor/system/pipelines/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFromParserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFromParserOK), nil

}

/*
FunctionDescriptors gets function descriptors
*/
func (a *Client) FunctionDescriptors(params *FunctionDescriptorsParams, authInfo runtime.ClientAuthInfoWriter) (*FunctionDescriptorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunctionDescriptorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "functionDescriptors",
		Method:             "GET",
		PathPattern:        "/plugins/org.graylog.plugins.pipelineprocessor/system/pipelines/rule/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FunctionDescriptorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FunctionDescriptorsOK), nil

}

/*
GetBulk retrieves the named processing rules in bulk
*/
func (a *Client) GetBulk(params *GetBulkParams, authInfo runtime.ClientAuthInfoWriter) (*GetBulkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBulkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBulk",
		Method:             "POST",
		PathPattern:        "/plugins/org.graylog.plugins.pipelineprocessor/system/pipelines/rule/multiple",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBulkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBulkOK), nil

}

/*
Parse parses a processing rule without saving it
*/
func (a *Client) Parse(params *ParseParams, authInfo runtime.ClientAuthInfoWriter) (*ParseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewParseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "parse",
		Method:             "POST",
		PathPattern:        "/plugins/org.graylog.plugins.pipelineprocessor/system/pipelines/rule/parse",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ParseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ParseOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
