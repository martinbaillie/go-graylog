// Code generated by go-swagger; DO NOT EDIT.

package cluster_metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/martinbaillie/go-graylog/pkg/models"
)

// NewMultipleMetricsAllNodesParams creates a new MultipleMetricsAllNodesParams object
// with the default values initialized.
func NewMultipleMetricsAllNodesParams() *MultipleMetricsAllNodesParams {
	var ()
	return &MultipleMetricsAllNodesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMultipleMetricsAllNodesParamsWithTimeout creates a new MultipleMetricsAllNodesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMultipleMetricsAllNodesParamsWithTimeout(timeout time.Duration) *MultipleMetricsAllNodesParams {
	var ()
	return &MultipleMetricsAllNodesParams{

		timeout: timeout,
	}
}

// NewMultipleMetricsAllNodesParamsWithContext creates a new MultipleMetricsAllNodesParams object
// with the default values initialized, and the ability to set a context for a request
func NewMultipleMetricsAllNodesParamsWithContext(ctx context.Context) *MultipleMetricsAllNodesParams {
	var ()
	return &MultipleMetricsAllNodesParams{

		Context: ctx,
	}
}

// NewMultipleMetricsAllNodesParamsWithHTTPClient creates a new MultipleMetricsAllNodesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMultipleMetricsAllNodesParamsWithHTTPClient(client *http.Client) *MultipleMetricsAllNodesParams {
	var ()
	return &MultipleMetricsAllNodesParams{
		HTTPClient: client,
	}
}

/*MultipleMetricsAllNodesParams contains all the parameters to send to the API endpoint
for the multiple metrics all nodes operation typically these are written to a http.Request
*/
type MultipleMetricsAllNodesParams struct {

	/*RequestedMetrics*/
	RequestedMetrics *models.MetricsReadRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the multiple metrics all nodes params
func (o *MultipleMetricsAllNodesParams) WithTimeout(timeout time.Duration) *MultipleMetricsAllNodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the multiple metrics all nodes params
func (o *MultipleMetricsAllNodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the multiple metrics all nodes params
func (o *MultipleMetricsAllNodesParams) WithContext(ctx context.Context) *MultipleMetricsAllNodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the multiple metrics all nodes params
func (o *MultipleMetricsAllNodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the multiple metrics all nodes params
func (o *MultipleMetricsAllNodesParams) WithHTTPClient(client *http.Client) *MultipleMetricsAllNodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the multiple metrics all nodes params
func (o *MultipleMetricsAllNodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRequestedMetrics adds the requestedMetrics to the multiple metrics all nodes params
func (o *MultipleMetricsAllNodesParams) WithRequestedMetrics(requestedMetrics *models.MetricsReadRequest) *MultipleMetricsAllNodesParams {
	o.SetRequestedMetrics(requestedMetrics)
	return o
}

// SetRequestedMetrics adds the requestedMetrics to the multiple metrics all nodes params
func (o *MultipleMetricsAllNodesParams) SetRequestedMetrics(requestedMetrics *models.MetricsReadRequest) {
	o.RequestedMetrics = requestedMetrics
}

// WriteToRequest writes these params to a swagger request
func (o *MultipleMetricsAllNodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RequestedMetrics != nil {
		if err := r.SetBodyParam(o.RequestedMetrics); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
