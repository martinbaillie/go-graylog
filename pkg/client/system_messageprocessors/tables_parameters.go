// Code generated by go-swagger; DO NOT EDIT.

package system_messageprocessors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTablesParams creates a new TablesParams object
// with the default values initialized.
func NewTablesParams() *TablesParams {
	var (
		orderDefault   = string("desc")
		pageDefault    = int64(1)
		perPageDefault = int64(50)
		resolveDefault = bool(false)
		sortDefault    = string("title")
	)
	return &TablesParams{
		Order:   &orderDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,
		Resolve: &resolveDefault,
		Sort:    sortDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewTablesParamsWithTimeout creates a new TablesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTablesParamsWithTimeout(timeout time.Duration) *TablesParams {
	var (
		orderDefault   = string("desc")
		pageDefault    = int64(1)
		perPageDefault = int64(50)
		resolveDefault = bool(false)
		sortDefault    = string("title")
	)
	return &TablesParams{
		Order:   &orderDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,
		Resolve: &resolveDefault,
		Sort:    sortDefault,

		timeout: timeout,
	}
}

// NewTablesParamsWithContext creates a new TablesParams object
// with the default values initialized, and the ability to set a context for a request
func NewTablesParamsWithContext(ctx context.Context) *TablesParams {
	var (
		orderDefault   = string("desc")
		pageDefault    = int64(1)
		perPageDefault = int64(50)
		resolveDefault = bool(false)
		sortDefault    = string("title")
	)
	return &TablesParams{
		Order:   &orderDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,
		Resolve: &resolveDefault,
		Sort:    sortDefault,

		Context: ctx,
	}
}

// NewTablesParamsWithHTTPClient creates a new TablesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTablesParamsWithHTTPClient(client *http.Client) *TablesParams {
	var (
		orderDefault   = string("desc")
		pageDefault    = int64(1)
		perPageDefault = int64(50)
		resolveDefault = bool(false)
		sortDefault    = string("title")
	)
	return &TablesParams{
		Order:      &orderDefault,
		Page:       &pageDefault,
		PerPage:    &perPageDefault,
		Resolve:    &resolveDefault,
		Sort:       sortDefault,
		HTTPClient: client,
	}
}

/*TablesParams contains all the parameters to send to the API endpoint
for the tables operation typically these are written to a http.Request
*/
type TablesParams struct {

	/*Order
	  The sort direction

	*/
	Order *string
	/*Page*/
	Page *int64
	/*PerPage*/
	PerPage *int64
	/*Query*/
	Query *string
	/*Resolve*/
	Resolve *bool
	/*Sort
	  The field to sort the result on

	*/
	Sort string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the tables params
func (o *TablesParams) WithTimeout(timeout time.Duration) *TablesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tables params
func (o *TablesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tables params
func (o *TablesParams) WithContext(ctx context.Context) *TablesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tables params
func (o *TablesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tables params
func (o *TablesParams) WithHTTPClient(client *http.Client) *TablesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tables params
func (o *TablesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrder adds the order to the tables params
func (o *TablesParams) WithOrder(order *string) *TablesParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the tables params
func (o *TablesParams) SetOrder(order *string) {
	o.Order = order
}

// WithPage adds the page to the tables params
func (o *TablesParams) WithPage(page *int64) *TablesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the tables params
func (o *TablesParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the tables params
func (o *TablesParams) WithPerPage(perPage *int64) *TablesParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the tables params
func (o *TablesParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithQuery adds the query to the tables params
func (o *TablesParams) WithQuery(query *string) *TablesParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the tables params
func (o *TablesParams) SetQuery(query *string) {
	o.Query = query
}

// WithResolve adds the resolve to the tables params
func (o *TablesParams) WithResolve(resolve *bool) *TablesParams {
	o.SetResolve(resolve)
	return o
}

// SetResolve adds the resolve to the tables params
func (o *TablesParams) SetResolve(resolve *bool) {
	o.Resolve = resolve
}

// WithSort adds the sort to the tables params
func (o *TablesParams) WithSort(sort string) *TablesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the tables params
func (o *TablesParams) SetSort(sort string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *TablesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Query != nil {

		// query param query
		var qrQuery string
		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {
			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}

	}

	if o.Resolve != nil {

		// query param resolve
		var qrResolve bool
		if o.Resolve != nil {
			qrResolve = *o.Resolve
		}
		qResolve := swag.FormatBool(qrResolve)
		if qResolve != "" {
			if err := r.SetQueryParam("resolve", qResolve); err != nil {
				return err
			}
		}

	}

	// query param sort
	qrSort := o.Sort
	qSort := qrSort
	if qSort != "" {
		if err := r.SetQueryParam("sort", qSort); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
