// Code generated by go-swagger; DO NOT EDIT.

package system_messageprocessors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteCacheParams creates a new DeleteCacheParams object
// with the default values initialized.
func NewDeleteCacheParams() *DeleteCacheParams {
	var ()
	return &DeleteCacheParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteCacheParamsWithTimeout creates a new DeleteCacheParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteCacheParamsWithTimeout(timeout time.Duration) *DeleteCacheParams {
	var ()
	return &DeleteCacheParams{

		timeout: timeout,
	}
}

// NewDeleteCacheParamsWithContext creates a new DeleteCacheParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteCacheParamsWithContext(ctx context.Context) *DeleteCacheParams {
	var ()
	return &DeleteCacheParams{

		Context: ctx,
	}
}

// NewDeleteCacheParamsWithHTTPClient creates a new DeleteCacheParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteCacheParamsWithHTTPClient(client *http.Client) *DeleteCacheParams {
	var ()
	return &DeleteCacheParams{
		HTTPClient: client,
	}
}

/*DeleteCacheParams contains all the parameters to send to the API endpoint
for the delete cache operation typically these are written to a http.Request
*/
type DeleteCacheParams struct {

	/*IDOrName*/
	IDOrName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete cache params
func (o *DeleteCacheParams) WithTimeout(timeout time.Duration) *DeleteCacheParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete cache params
func (o *DeleteCacheParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete cache params
func (o *DeleteCacheParams) WithContext(ctx context.Context) *DeleteCacheParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete cache params
func (o *DeleteCacheParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete cache params
func (o *DeleteCacheParams) WithHTTPClient(client *http.Client) *DeleteCacheParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete cache params
func (o *DeleteCacheParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIDOrName adds the iDOrName to the delete cache params
func (o *DeleteCacheParams) WithIDOrName(iDOrName string) *DeleteCacheParams {
	o.SetIDOrName(iDOrName)
	return o
}

// SetIDOrName adds the idOrName to the delete cache params
func (o *DeleteCacheParams) SetIDOrName(iDOrName string) {
	o.IDOrName = iDOrName
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteCacheParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param idOrName
	if err := r.SetPathParam("idOrName", o.IDOrName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
