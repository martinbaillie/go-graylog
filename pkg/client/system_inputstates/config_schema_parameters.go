// Code generated by go-swagger; DO NOT EDIT.

package system_inputstates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewConfigSchemaParams creates a new ConfigSchemaParams object
// with the default values initialized.
func NewConfigSchemaParams() *ConfigSchemaParams {
	var ()
	return &ConfigSchemaParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConfigSchemaParamsWithTimeout creates a new ConfigSchemaParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConfigSchemaParamsWithTimeout(timeout time.Duration) *ConfigSchemaParams {
	var ()
	return &ConfigSchemaParams{

		timeout: timeout,
	}
}

// NewConfigSchemaParamsWithContext creates a new ConfigSchemaParams object
// with the default values initialized, and the ability to set a context for a request
func NewConfigSchemaParamsWithContext(ctx context.Context) *ConfigSchemaParams {
	var ()
	return &ConfigSchemaParams{

		Context: ctx,
	}
}

// NewConfigSchemaParamsWithHTTPClient creates a new ConfigSchemaParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewConfigSchemaParamsWithHTTPClient(client *http.Client) *ConfigSchemaParams {
	var ()
	return &ConfigSchemaParams{
		HTTPClient: client,
	}
}

/*ConfigSchemaParams contains all the parameters to send to the API endpoint
for the config schema operation typically these are written to a http.Request
*/
type ConfigSchemaParams struct {

	/*Strategy
	  The name of the rotation strategy

	*/
	Strategy string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the config schema params
func (o *ConfigSchemaParams) WithTimeout(timeout time.Duration) *ConfigSchemaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the config schema params
func (o *ConfigSchemaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the config schema params
func (o *ConfigSchemaParams) WithContext(ctx context.Context) *ConfigSchemaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the config schema params
func (o *ConfigSchemaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the config schema params
func (o *ConfigSchemaParams) WithHTTPClient(client *http.Client) *ConfigSchemaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the config schema params
func (o *ConfigSchemaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithStrategy adds the strategy to the config schema params
func (o *ConfigSchemaParams) WithStrategy(strategy string) *ConfigSchemaParams {
	o.SetStrategy(strategy)
	return o
}

// SetStrategy adds the strategy to the config schema params
func (o *ConfigSchemaParams) SetStrategy(strategy string) {
	o.Strategy = strategy
}

// WriteToRequest writes these params to a swagger request
func (o *ConfigSchemaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param strategy
	if err := r.SetPathParam("strategy", o.Strategy); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
