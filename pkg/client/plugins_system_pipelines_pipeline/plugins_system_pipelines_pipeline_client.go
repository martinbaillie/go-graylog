// Code generated by go-swagger; DO NOT EDIT.

package plugins_system_pipelines_pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new plugins org graylog plugins pipelineprocessor system pipelines pipeline API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plugins org graylog plugins pipelineprocessor system pipelines pipeline API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ConnectPipelines connects processing pipelines to a stream
*/
func (a *Client) ConnectPipelines(params *ConnectPipelinesParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectPipelinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectPipelinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectPipelines",
		Method:             "POST",
		PathPattern:        "/plugins/org.graylog.plugins.pipelineprocessor/system/pipelines/connections/to_stream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectPipelinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConnectPipelinesOK), nil

}

/*
ConnectStreams connects streams to a processing pipeline
*/
func (a *Client) ConnectStreams(params *ConnectStreamsParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectStreamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectStreams",
		Method:             "POST",
		PathPattern:        "/plugins/org.graylog.plugins.pipelineprocessor/system/pipelines/connections/to_pipeline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectStreamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConnectStreamsOK), nil

}

/*
GetPipelinesForStream gets pipeline connections for the given stream
*/
func (a *Client) GetPipelinesForStream(params *GetPipelinesForStreamParams, authInfo runtime.ClientAuthInfoWriter) (*GetPipelinesForStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelinesForStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelinesForStream",
		Method:             "GET",
		PathPattern:        "/plugins/org.graylog.plugins.pipelineprocessor/system/pipelines/connections/{streamId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPipelinesForStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPipelinesForStreamOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
