// Code generated by go-swagger; DO NOT EDIT.

package system_throughput

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system throughput API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system throughput API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
FsStats filesystems information about this node

This resource returns information about the filesystems of this node.
*/
func (a *Client) FsStats(params *FsStatsParams, authInfo runtime.ClientAuthInfoWriter) (*FsStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFsStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fsStats",
		Method:             "GET",
		PathPattern:        "/system/stats/fs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FsStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FsStatsOK), nil

}

/*
JvmStats js VM information about this node

This resource returns information about the Java Virtual Machine of this node.
*/
func (a *Client) JvmStats(params *JvmStatsParams, authInfo runtime.ClientAuthInfoWriter) (*JvmStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJvmStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jvmStats",
		Method:             "GET",
		PathPattern:        "/system/stats/jvm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JvmStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JvmStatsOK), nil

}

/*
NetworkStats networkings information about this node

This resource returns information about the networking system this node is running with.
*/
func (a *Client) NetworkStats(params *NetworkStatsParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "networkStats",
		Method:             "GET",
		PathPattern:        "/system/stats/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetworkStatsOK), nil

}

/*
OsStats os s information about this node

This resource returns information about the operating system this node is running on.
*/
func (a *Client) OsStats(params *OsStatsParams, authInfo runtime.ClientAuthInfoWriter) (*OsStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOsStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "osStats",
		Method:             "GET",
		PathPattern:        "/system/stats/os",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OsStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OsStatsOK), nil

}

/*
ProcessStats processes information about this node

This resource returns information about the process this node is running as.
*/
func (a *Client) ProcessStats(params *ProcessStatsParams, authInfo runtime.ClientAuthInfoWriter) (*ProcessStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProcessStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "processStats",
		Method:             "GET",
		PathPattern:        "/system/stats/process",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProcessStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProcessStatsOK), nil

}

/*
SystemStats systems information about this node

This resource returns information about the system this node is running on.
*/
func (a *Client) SystemStats(params *SystemStatsParams, authInfo runtime.ClientAuthInfoWriter) (*SystemStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "systemStats",
		Method:             "GET",
		PathPattern:        "/system/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SystemStatsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
