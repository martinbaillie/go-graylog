// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LookupTablePageLookupTablesItems lookup table page lookup tables items
// swagger:model lookupTablePageLookupTablesItems
type LookupTablePageLookupTablesItems struct {

	// cache id
	CacheID string `json:"cache_id,omitempty"`

	// content pack
	ContentPack string `json:"content_pack,omitempty"`

	// data adapter id
	DataAdapterID string `json:"data_adapter_id,omitempty"`

	// default multi value
	DefaultMultiValue string `json:"default_multi_value,omitempty"`

	// default multi value type
	DefaultMultiValueType string `json:"default_multi_value_type,omitempty"`

	// default single value
	DefaultSingleValue string `json:"default_single_value,omitempty"`

	// default single value type
	DefaultSingleValueType string `json:"default_single_value_type,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this lookup table page lookup tables items
func (m *LookupTablePageLookupTablesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultMultiValueType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultSingleValueType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lookupTablePageLookupTablesItemsTypeDefaultMultiValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STRING","NUMBER","OBJECT","BOOLEAN","NULL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lookupTablePageLookupTablesItemsTypeDefaultMultiValueTypePropEnum = append(lookupTablePageLookupTablesItemsTypeDefaultMultiValueTypePropEnum, v)
	}
}

const (
	// LookupTablePageLookupTablesItemsDefaultMultiValueTypeSTRING captures enum value "STRING"
	LookupTablePageLookupTablesItemsDefaultMultiValueTypeSTRING string = "STRING"
	// LookupTablePageLookupTablesItemsDefaultMultiValueTypeNUMBER captures enum value "NUMBER"
	LookupTablePageLookupTablesItemsDefaultMultiValueTypeNUMBER string = "NUMBER"
	// LookupTablePageLookupTablesItemsDefaultMultiValueTypeOBJECT captures enum value "OBJECT"
	LookupTablePageLookupTablesItemsDefaultMultiValueTypeOBJECT string = "OBJECT"
	// LookupTablePageLookupTablesItemsDefaultMultiValueTypeBOOLEAN captures enum value "BOOLEAN"
	LookupTablePageLookupTablesItemsDefaultMultiValueTypeBOOLEAN string = "BOOLEAN"
	// LookupTablePageLookupTablesItemsDefaultMultiValueTypeNULL captures enum value "NULL"
	LookupTablePageLookupTablesItemsDefaultMultiValueTypeNULL string = "NULL"
)

// prop value enum
func (m *LookupTablePageLookupTablesItems) validateDefaultMultiValueTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lookupTablePageLookupTablesItemsTypeDefaultMultiValueTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LookupTablePageLookupTablesItems) validateDefaultMultiValueType(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultMultiValueType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultMultiValueTypeEnum("default_multi_value_type", "body", m.DefaultMultiValueType); err != nil {
		return err
	}

	return nil
}

var lookupTablePageLookupTablesItemsTypeDefaultSingleValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STRING","NUMBER","OBJECT","BOOLEAN","NULL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lookupTablePageLookupTablesItemsTypeDefaultSingleValueTypePropEnum = append(lookupTablePageLookupTablesItemsTypeDefaultSingleValueTypePropEnum, v)
	}
}

const (
	// LookupTablePageLookupTablesItemsDefaultSingleValueTypeSTRING captures enum value "STRING"
	LookupTablePageLookupTablesItemsDefaultSingleValueTypeSTRING string = "STRING"
	// LookupTablePageLookupTablesItemsDefaultSingleValueTypeNUMBER captures enum value "NUMBER"
	LookupTablePageLookupTablesItemsDefaultSingleValueTypeNUMBER string = "NUMBER"
	// LookupTablePageLookupTablesItemsDefaultSingleValueTypeOBJECT captures enum value "OBJECT"
	LookupTablePageLookupTablesItemsDefaultSingleValueTypeOBJECT string = "OBJECT"
	// LookupTablePageLookupTablesItemsDefaultSingleValueTypeBOOLEAN captures enum value "BOOLEAN"
	LookupTablePageLookupTablesItemsDefaultSingleValueTypeBOOLEAN string = "BOOLEAN"
	// LookupTablePageLookupTablesItemsDefaultSingleValueTypeNULL captures enum value "NULL"
	LookupTablePageLookupTablesItemsDefaultSingleValueTypeNULL string = "NULL"
)

// prop value enum
func (m *LookupTablePageLookupTablesItems) validateDefaultSingleValueTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lookupTablePageLookupTablesItemsTypeDefaultSingleValueTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LookupTablePageLookupTablesItems) validateDefaultSingleValueType(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultSingleValueType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultSingleValueTypeEnum("default_single_value_type", "body", m.DefaultSingleValueType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LookupTablePageLookupTablesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LookupTablePageLookupTablesItems) UnmarshalBinary(b []byte) error {
	var res LookupTablePageLookupTablesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
