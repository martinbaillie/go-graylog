// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ElasticsearchStats elasticsearch stats
// swagger:model ElasticsearchStats
type ElasticsearchStats struct {

	// cluster health
	ClusterHealth *ElasticsearchStatsClusterHealth `json:"cluster_health,omitempty"`

	// cluster name
	ClusterName string `json:"cluster_name,omitempty"`

	// cluster version
	ClusterVersion string `json:"cluster_version,omitempty"`

	// indices stats
	IndicesStats *ElasticsearchStatsIndicesStats `json:"indices_stats,omitempty"`

	// nodes stats
	NodesStats *ElasticsearchStatsNodesStats `json:"nodes_stats,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this elasticsearch stats
func (m *ElasticsearchStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterHealth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIndicesStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNodesStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchStats) validateClusterHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterHealth) { // not required
		return nil
	}

	if m.ClusterHealth != nil {

		if err := m.ClusterHealth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_health")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchStats) validateIndicesStats(formats strfmt.Registry) error {

	if swag.IsZero(m.IndicesStats) { // not required
		return nil
	}

	if m.IndicesStats != nil {

		if err := m.IndicesStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indices_stats")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchStats) validateNodesStats(formats strfmt.Registry) error {

	if swag.IsZero(m.NodesStats) { // not required
		return nil
	}

	if m.NodesStats != nil {

		if err := m.NodesStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodes_stats")
			}
			return err
		}
	}

	return nil
}

var elasticsearchStatsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RED","YELLOW","GREEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		elasticsearchStatsTypeStatusPropEnum = append(elasticsearchStatsTypeStatusPropEnum, v)
	}
}

const (
	// ElasticsearchStatsStatusRED captures enum value "RED"
	ElasticsearchStatsStatusRED string = "RED"
	// ElasticsearchStatsStatusYELLOW captures enum value "YELLOW"
	ElasticsearchStatsStatusYELLOW string = "YELLOW"
	// ElasticsearchStatsStatusGREEN captures enum value "GREEN"
	ElasticsearchStatsStatusGREEN string = "GREEN"
)

// prop value enum
func (m *ElasticsearchStats) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, elasticsearchStatsTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ElasticsearchStats) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ElasticsearchStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticsearchStats) UnmarshalBinary(b []byte) error {
	var res ElasticsearchStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
