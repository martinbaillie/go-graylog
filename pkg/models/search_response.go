// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchResponse search response
// swagger:model SearchResponse
type SearchResponse struct {

	// built query
	BuiltQuery string `json:"built_query,omitempty"`

	// decoration stats
	DecorationStats *SearchResponseDecorationStats `json:"decoration_stats,omitempty"`

	// fields
	Fields []string `json:"fields"`

	// from
	From strfmt.DateTime `json:"from,omitempty"`

	// messages
	Messages SearchResponseMessages `json:"messages"`

	// query
	Query string `json:"query,omitempty"`

	// time
	Time int64 `json:"time,omitempty"`

	// to
	To strfmt.DateTime `json:"to,omitempty"`

	// total results
	TotalResults int64 `json:"total_results,omitempty"`

	// used indices
	UsedIndices SearchResponseUsedIndices `json:"used_indices"`
}

// Validate validates this search response
func (m *SearchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDecorationStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchResponse) validateDecorationStats(formats strfmt.Registry) error {

	if swag.IsZero(m.DecorationStats) { // not required
		return nil
	}

	if m.DecorationStats != nil {

		if err := m.DecorationStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decoration_stats")
			}
			return err
		}
	}

	return nil
}

func (m *SearchResponse) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	return nil
}

func (m *SearchResponse) validateFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.From) { // not required
		return nil
	}

	if err := validate.FormatOf("from", "body", "date-time", m.From.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SearchResponse) validateTo(formats strfmt.Registry) error {

	if swag.IsZero(m.To) { // not required
		return nil
	}

	if err := validate.FormatOf("to", "body", "date-time", m.To.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchResponse) UnmarshalBinary(b []byte) error {
	var res SearchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
