// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigurationBundleLookupTablesItems configuration bundle lookup tables items
// swagger:model configurationBundleLookupTablesItems
type ConfigurationBundleLookupTablesItems struct {

	// cache name
	CacheName string `json:"cache_name,omitempty"`

	// data adapter name
	DataAdapterName string `json:"data_adapter_name,omitempty"`

	// default multi value
	DefaultMultiValue string `json:"default_multi_value,omitempty"`

	// default multi value type
	DefaultMultiValueType string `json:"default_multi_value_type,omitempty"`

	// default single value
	DefaultSingleValue string `json:"default_single_value,omitempty"`

	// default single value type
	DefaultSingleValueType string `json:"default_single_value_type,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this configuration bundle lookup tables items
func (m *ConfigurationBundleLookupTablesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultMultiValueType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultSingleValueType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var configurationBundleLookupTablesItemsTypeDefaultMultiValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STRING","NUMBER","OBJECT","BOOLEAN","NULL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configurationBundleLookupTablesItemsTypeDefaultMultiValueTypePropEnum = append(configurationBundleLookupTablesItemsTypeDefaultMultiValueTypePropEnum, v)
	}
}

const (
	// ConfigurationBundleLookupTablesItemsDefaultMultiValueTypeSTRING captures enum value "STRING"
	ConfigurationBundleLookupTablesItemsDefaultMultiValueTypeSTRING string = "STRING"
	// ConfigurationBundleLookupTablesItemsDefaultMultiValueTypeNUMBER captures enum value "NUMBER"
	ConfigurationBundleLookupTablesItemsDefaultMultiValueTypeNUMBER string = "NUMBER"
	// ConfigurationBundleLookupTablesItemsDefaultMultiValueTypeOBJECT captures enum value "OBJECT"
	ConfigurationBundleLookupTablesItemsDefaultMultiValueTypeOBJECT string = "OBJECT"
	// ConfigurationBundleLookupTablesItemsDefaultMultiValueTypeBOOLEAN captures enum value "BOOLEAN"
	ConfigurationBundleLookupTablesItemsDefaultMultiValueTypeBOOLEAN string = "BOOLEAN"
	// ConfigurationBundleLookupTablesItemsDefaultMultiValueTypeNULL captures enum value "NULL"
	ConfigurationBundleLookupTablesItemsDefaultMultiValueTypeNULL string = "NULL"
)

// prop value enum
func (m *ConfigurationBundleLookupTablesItems) validateDefaultMultiValueTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configurationBundleLookupTablesItemsTypeDefaultMultiValueTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigurationBundleLookupTablesItems) validateDefaultMultiValueType(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultMultiValueType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultMultiValueTypeEnum("default_multi_value_type", "body", m.DefaultMultiValueType); err != nil {
		return err
	}

	return nil
}

var configurationBundleLookupTablesItemsTypeDefaultSingleValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STRING","NUMBER","OBJECT","BOOLEAN","NULL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configurationBundleLookupTablesItemsTypeDefaultSingleValueTypePropEnum = append(configurationBundleLookupTablesItemsTypeDefaultSingleValueTypePropEnum, v)
	}
}

const (
	// ConfigurationBundleLookupTablesItemsDefaultSingleValueTypeSTRING captures enum value "STRING"
	ConfigurationBundleLookupTablesItemsDefaultSingleValueTypeSTRING string = "STRING"
	// ConfigurationBundleLookupTablesItemsDefaultSingleValueTypeNUMBER captures enum value "NUMBER"
	ConfigurationBundleLookupTablesItemsDefaultSingleValueTypeNUMBER string = "NUMBER"
	// ConfigurationBundleLookupTablesItemsDefaultSingleValueTypeOBJECT captures enum value "OBJECT"
	ConfigurationBundleLookupTablesItemsDefaultSingleValueTypeOBJECT string = "OBJECT"
	// ConfigurationBundleLookupTablesItemsDefaultSingleValueTypeBOOLEAN captures enum value "BOOLEAN"
	ConfigurationBundleLookupTablesItemsDefaultSingleValueTypeBOOLEAN string = "BOOLEAN"
	// ConfigurationBundleLookupTablesItemsDefaultSingleValueTypeNULL captures enum value "NULL"
	ConfigurationBundleLookupTablesItemsDefaultSingleValueTypeNULL string = "NULL"
)

// prop value enum
func (m *ConfigurationBundleLookupTablesItems) validateDefaultSingleValueTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configurationBundleLookupTablesItemsTypeDefaultSingleValueTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigurationBundleLookupTablesItems) validateDefaultSingleValueType(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultSingleValueType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultSingleValueTypeEnum("default_single_value_type", "body", m.DefaultSingleValueType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationBundleLookupTablesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationBundleLookupTablesItems) UnmarshalBinary(b []byte) error {
	var res ConfigurationBundleLookupTablesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
