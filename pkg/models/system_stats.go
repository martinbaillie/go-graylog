// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SystemStats system stats
// swagger:model SystemStats
type SystemStats struct {

	// fs
	Fs *SystemStatsFs `json:"fs,omitempty"`

	// jvm
	Jvm *SystemStatsJvm `json:"jvm,omitempty"`

	// network
	Network *SystemStatsNetwork `json:"network,omitempty"`

	// os
	Os *SystemStatsOs `json:"os,omitempty"`

	// process
	Process *SystemStatsProcess `json:"process,omitempty"`
}

// Validate validates this system stats
func (m *SystemStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJvm(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcess(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemStats) validateFs(formats strfmt.Registry) error {

	if swag.IsZero(m.Fs) { // not required
		return nil
	}

	if m.Fs != nil {

		if err := m.Fs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fs")
			}
			return err
		}
	}

	return nil
}

func (m *SystemStats) validateJvm(formats strfmt.Registry) error {

	if swag.IsZero(m.Jvm) { // not required
		return nil
	}

	if m.Jvm != nil {

		if err := m.Jvm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jvm")
			}
			return err
		}
	}

	return nil
}

func (m *SystemStats) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {

		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *SystemStats) validateOs(formats strfmt.Registry) error {

	if swag.IsZero(m.Os) { // not required
		return nil
	}

	if m.Os != nil {

		if err := m.Os.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os")
			}
			return err
		}
	}

	return nil
}

func (m *SystemStats) validateProcess(formats strfmt.Registry) error {

	if swag.IsZero(m.Process) { // not required
		return nil
	}

	if m.Process != nil {

		if err := m.Process.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("process")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemStats) UnmarshalBinary(b []byte) error {
	var res SystemStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
