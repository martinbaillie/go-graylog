// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigurationBundleInputsItemsExtractorsItems configuration bundle inputs items extractors items
// swagger:model configurationBundleInputsItemsExtractorsItems
type ConfigurationBundleInputsItemsExtractorsItems struct {

	// condition type
	ConditionType string `json:"condition_type,omitempty"`

	// condition value
	ConditionValue string `json:"condition_value,omitempty"`

	// configuration
	Configuration interface{} `json:"configuration,omitempty"`

	// converters
	Converters ConfigurationBundleInputsItemsExtractorsItemsConverters `json:"converters"`

	// cursor strategy
	CursorStrategy string `json:"cursor_strategy,omitempty"`

	// order
	Order int64 `json:"order,omitempty"`

	// source field
	SourceField string `json:"source_field,omitempty"`

	// target field
	TargetField string `json:"target_field,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this configuration bundle inputs items extractors items
func (m *ConfigurationBundleInputsItemsExtractorsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCursorStrategy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var configurationBundleInputsItemsExtractorsItemsTypeConditionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STRING","REGEX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configurationBundleInputsItemsExtractorsItemsTypeConditionTypePropEnum = append(configurationBundleInputsItemsExtractorsItemsTypeConditionTypePropEnum, v)
	}
}

const (
	// ConfigurationBundleInputsItemsExtractorsItemsConditionTypeNONE captures enum value "NONE"
	ConfigurationBundleInputsItemsExtractorsItemsConditionTypeNONE string = "NONE"
	// ConfigurationBundleInputsItemsExtractorsItemsConditionTypeSTRING captures enum value "STRING"
	ConfigurationBundleInputsItemsExtractorsItemsConditionTypeSTRING string = "STRING"
	// ConfigurationBundleInputsItemsExtractorsItemsConditionTypeREGEX captures enum value "REGEX"
	ConfigurationBundleInputsItemsExtractorsItemsConditionTypeREGEX string = "REGEX"
)

// prop value enum
func (m *ConfigurationBundleInputsItemsExtractorsItems) validateConditionTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configurationBundleInputsItemsExtractorsItemsTypeConditionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigurationBundleInputsItemsExtractorsItems) validateConditionType(formats strfmt.Registry) error {

	if swag.IsZero(m.ConditionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionTypeEnum("condition_type", "body", m.ConditionType); err != nil {
		return err
	}

	return nil
}

var configurationBundleInputsItemsExtractorsItemsTypeCursorStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CUT","COPY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configurationBundleInputsItemsExtractorsItemsTypeCursorStrategyPropEnum = append(configurationBundleInputsItemsExtractorsItemsTypeCursorStrategyPropEnum, v)
	}
}

const (
	// ConfigurationBundleInputsItemsExtractorsItemsCursorStrategyCUT captures enum value "CUT"
	ConfigurationBundleInputsItemsExtractorsItemsCursorStrategyCUT string = "CUT"
	// ConfigurationBundleInputsItemsExtractorsItemsCursorStrategyCOPY captures enum value "COPY"
	ConfigurationBundleInputsItemsExtractorsItemsCursorStrategyCOPY string = "COPY"
)

// prop value enum
func (m *ConfigurationBundleInputsItemsExtractorsItems) validateCursorStrategyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configurationBundleInputsItemsExtractorsItemsTypeCursorStrategyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigurationBundleInputsItemsExtractorsItems) validateCursorStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.CursorStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateCursorStrategyEnum("cursor_strategy", "body", m.CursorStrategy); err != nil {
		return err
	}

	return nil
}

var configurationBundleInputsItemsExtractorsItemsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUBSTRING","REGEX","REGEX_REPLACE","SPLIT_AND_INDEX","COPY_INPUT","GROK","JSON","LOOKUP_TABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configurationBundleInputsItemsExtractorsItemsTypeTypePropEnum = append(configurationBundleInputsItemsExtractorsItemsTypeTypePropEnum, v)
	}
}

const (
	// ConfigurationBundleInputsItemsExtractorsItemsTypeSUBSTRING captures enum value "SUBSTRING"
	ConfigurationBundleInputsItemsExtractorsItemsTypeSUBSTRING string = "SUBSTRING"
	// ConfigurationBundleInputsItemsExtractorsItemsTypeREGEX captures enum value "REGEX"
	ConfigurationBundleInputsItemsExtractorsItemsTypeREGEX string = "REGEX"
	// ConfigurationBundleInputsItemsExtractorsItemsTypeREGEXREPLACE captures enum value "REGEX_REPLACE"
	ConfigurationBundleInputsItemsExtractorsItemsTypeREGEXREPLACE string = "REGEX_REPLACE"
	// ConfigurationBundleInputsItemsExtractorsItemsTypeSPLITANDINDEX captures enum value "SPLIT_AND_INDEX"
	ConfigurationBundleInputsItemsExtractorsItemsTypeSPLITANDINDEX string = "SPLIT_AND_INDEX"
	// ConfigurationBundleInputsItemsExtractorsItemsTypeCOPYINPUT captures enum value "COPY_INPUT"
	ConfigurationBundleInputsItemsExtractorsItemsTypeCOPYINPUT string = "COPY_INPUT"
	// ConfigurationBundleInputsItemsExtractorsItemsTypeGROK captures enum value "GROK"
	ConfigurationBundleInputsItemsExtractorsItemsTypeGROK string = "GROK"
	// ConfigurationBundleInputsItemsExtractorsItemsTypeJSON captures enum value "JSON"
	ConfigurationBundleInputsItemsExtractorsItemsTypeJSON string = "JSON"
	// ConfigurationBundleInputsItemsExtractorsItemsTypeLOOKUPTABLE captures enum value "LOOKUP_TABLE"
	ConfigurationBundleInputsItemsExtractorsItemsTypeLOOKUPTABLE string = "LOOKUP_TABLE"
)

// prop value enum
func (m *ConfigurationBundleInputsItemsExtractorsItems) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configurationBundleInputsItemsExtractorsItemsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigurationBundleInputsItemsExtractorsItems) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationBundleInputsItemsExtractorsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationBundleInputsItemsExtractorsItems) UnmarshalBinary(b []byte) error {
	var res ConfigurationBundleInputsItemsExtractorsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
