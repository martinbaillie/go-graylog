// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClusterStats cluster stats
// swagger:model ClusterStats
type ClusterStats struct {

	// alarm stats
	AlarmStats *ClusterStatsAlarmStats `json:"alarm_stats,omitempty"`

	// content pack count
	ContentPackCount int64 `json:"content_pack_count,omitempty"`

	// dashboard count
	DashboardCount int64 `json:"dashboard_count,omitempty"`

	// elasticsearch
	Elasticsearch *ClusterStatsElasticsearch `json:"elasticsearch,omitempty"`

	// extractor count
	ExtractorCount int64 `json:"extractor_count,omitempty"`

	// extractor count by type
	ExtractorCountByType interface{} `json:"extractor_count_by_type,omitempty"`

	// global input count
	GlobalInputCount int64 `json:"global_input_count,omitempty"`

	// input count
	InputCount int64 `json:"input_count,omitempty"`

	// input count by type
	InputCountByType interface{} `json:"input_count_by_type,omitempty"`

	// ldap stats
	LdapStats *ClusterStatsLdapStats `json:"ldap_stats,omitempty"`

	// mongo
	Mongo *ClusterStatsMongo `json:"mongo,omitempty"`

	// output count
	OutputCount int64 `json:"output_count,omitempty"`

	// output count by type
	OutputCountByType interface{} `json:"output_count_by_type,omitempty"`

	// stream count
	StreamCount int64 `json:"stream_count,omitempty"`

	// stream rule count
	StreamRuleCount int64 `json:"stream_rule_count,omitempty"`

	// stream rule count by stream
	StreamRuleCountByStream interface{} `json:"stream_rule_count_by_stream,omitempty"`

	// user count
	UserCount int64 `json:"user_count,omitempty"`
}

// Validate validates this cluster stats
func (m *ClusterStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlarmStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateElasticsearch(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLdapStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMongo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStats) validateAlarmStats(formats strfmt.Registry) error {

	if swag.IsZero(m.AlarmStats) { // not required
		return nil
	}

	if m.AlarmStats != nil {

		if err := m.AlarmStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alarm_stats")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) validateElasticsearch(formats strfmt.Registry) error {

	if swag.IsZero(m.Elasticsearch) { // not required
		return nil
	}

	if m.Elasticsearch != nil {

		if err := m.Elasticsearch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elasticsearch")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) validateLdapStats(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapStats) { // not required
		return nil
	}

	if m.LdapStats != nil {

		if err := m.LdapStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_stats")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) validateMongo(formats strfmt.Registry) error {

	if swag.IsZero(m.Mongo) { // not required
		return nil
	}

	if m.Mongo != nil {

		if err := m.Mongo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterStats) UnmarshalBinary(b []byte) error {
	var res ClusterStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
