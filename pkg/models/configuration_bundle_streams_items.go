// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigurationBundleStreamsItems configuration bundle streams items
// swagger:model configurationBundleStreamsItems
type ConfigurationBundleStreamsItems struct {

	// default stream
	DefaultStream bool `json:"default_stream,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// matching type
	MatchingType string `json:"matching_type,omitempty"`

	// outputs
	Outputs []string `json:"outputs"`

	// stream rules
	StreamRules ConfigurationBundleStreamsItemsStreamRules `json:"stream_rules"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this configuration bundle streams items
func (m *ConfigurationBundleStreamsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOutputs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var configurationBundleStreamsItemsTypeMatchingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AND","OR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configurationBundleStreamsItemsTypeMatchingTypePropEnum = append(configurationBundleStreamsItemsTypeMatchingTypePropEnum, v)
	}
}

const (
	// ConfigurationBundleStreamsItemsMatchingTypeAND captures enum value "AND"
	ConfigurationBundleStreamsItemsMatchingTypeAND string = "AND"
	// ConfigurationBundleStreamsItemsMatchingTypeOR captures enum value "OR"
	ConfigurationBundleStreamsItemsMatchingTypeOR string = "OR"
)

// prop value enum
func (m *ConfigurationBundleStreamsItems) validateMatchingTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configurationBundleStreamsItemsTypeMatchingTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigurationBundleStreamsItems) validateMatchingType(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMatchingTypeEnum("matching_type", "body", m.MatchingType); err != nil {
		return err
	}

	return nil
}

func (m *ConfigurationBundleStreamsItems) validateOutputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Outputs) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationBundleStreamsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationBundleStreamsItems) UnmarshalBinary(b []byte) error {
	var res ConfigurationBundleStreamsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
