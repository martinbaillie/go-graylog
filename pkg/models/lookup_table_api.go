// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LookupTableAPI lookup table Api
// swagger:model LookupTableApi
type LookupTableAPI struct {

	// cache id
	CacheID string `json:"cache_id,omitempty"`

	// content pack
	ContentPack string `json:"content_pack,omitempty"`

	// data adapter id
	DataAdapterID string `json:"data_adapter_id,omitempty"`

	// default multi value
	DefaultMultiValue string `json:"default_multi_value,omitempty"`

	// default multi value type
	DefaultMultiValueType string `json:"default_multi_value_type,omitempty"`

	// default single value
	DefaultSingleValue string `json:"default_single_value,omitempty"`

	// default single value type
	DefaultSingleValueType string `json:"default_single_value_type,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this lookup table Api
func (m *LookupTableAPI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultMultiValueType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultSingleValueType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lookupTableApiTypeDefaultMultiValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STRING","NUMBER","OBJECT","BOOLEAN","NULL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lookupTableApiTypeDefaultMultiValueTypePropEnum = append(lookupTableApiTypeDefaultMultiValueTypePropEnum, v)
	}
}

const (
	// LookupTableAPIDefaultMultiValueTypeSTRING captures enum value "STRING"
	LookupTableAPIDefaultMultiValueTypeSTRING string = "STRING"
	// LookupTableAPIDefaultMultiValueTypeNUMBER captures enum value "NUMBER"
	LookupTableAPIDefaultMultiValueTypeNUMBER string = "NUMBER"
	// LookupTableAPIDefaultMultiValueTypeOBJECT captures enum value "OBJECT"
	LookupTableAPIDefaultMultiValueTypeOBJECT string = "OBJECT"
	// LookupTableAPIDefaultMultiValueTypeBOOLEAN captures enum value "BOOLEAN"
	LookupTableAPIDefaultMultiValueTypeBOOLEAN string = "BOOLEAN"
	// LookupTableAPIDefaultMultiValueTypeNULL captures enum value "NULL"
	LookupTableAPIDefaultMultiValueTypeNULL string = "NULL"
)

// prop value enum
func (m *LookupTableAPI) validateDefaultMultiValueTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lookupTableApiTypeDefaultMultiValueTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LookupTableAPI) validateDefaultMultiValueType(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultMultiValueType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultMultiValueTypeEnum("default_multi_value_type", "body", m.DefaultMultiValueType); err != nil {
		return err
	}

	return nil
}

var lookupTableApiTypeDefaultSingleValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STRING","NUMBER","OBJECT","BOOLEAN","NULL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lookupTableApiTypeDefaultSingleValueTypePropEnum = append(lookupTableApiTypeDefaultSingleValueTypePropEnum, v)
	}
}

const (
	// LookupTableAPIDefaultSingleValueTypeSTRING captures enum value "STRING"
	LookupTableAPIDefaultSingleValueTypeSTRING string = "STRING"
	// LookupTableAPIDefaultSingleValueTypeNUMBER captures enum value "NUMBER"
	LookupTableAPIDefaultSingleValueTypeNUMBER string = "NUMBER"
	// LookupTableAPIDefaultSingleValueTypeOBJECT captures enum value "OBJECT"
	LookupTableAPIDefaultSingleValueTypeOBJECT string = "OBJECT"
	// LookupTableAPIDefaultSingleValueTypeBOOLEAN captures enum value "BOOLEAN"
	LookupTableAPIDefaultSingleValueTypeBOOLEAN string = "BOOLEAN"
	// LookupTableAPIDefaultSingleValueTypeNULL captures enum value "NULL"
	LookupTableAPIDefaultSingleValueTypeNULL string = "NULL"
)

// prop value enum
func (m *LookupTableAPI) validateDefaultSingleValueTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lookupTableApiTypeDefaultSingleValueTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LookupTableAPI) validateDefaultSingleValueType(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultSingleValueType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultSingleValueTypeEnum("default_single_value_type", "body", m.DefaultSingleValueType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LookupTableAPI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LookupTableAPI) UnmarshalBinary(b []byte) error {
	var res LookupTableAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
