// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ExtractorSummaryListExtractorsItemsMetrics extractor summary list extractors items metrics
// swagger:model extractorSummaryListExtractorsItemsMetrics
type ExtractorSummaryListExtractorsItemsMetrics struct {

	// condition
	Condition interface{} `json:"condition,omitempty"`

	// condition hits
	ConditionHits int64 `json:"condition_hits,omitempty"`

	// condition misses
	ConditionMisses int64 `json:"condition_misses,omitempty"`

	// converters
	Converters interface{} `json:"converters,omitempty"`

	// execution
	Execution *ExtractorSummaryListExtractorsItemsMetricsExecution `json:"execution,omitempty"`

	// total
	Total interface{} `json:"total,omitempty"`
}

// Validate validates this extractor summary list extractors items metrics
func (m *ExtractorSummaryListExtractorsItemsMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecution(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtractorSummaryListExtractorsItemsMetrics) validateExecution(formats strfmt.Registry) error {

	if swag.IsZero(m.Execution) { // not required
		return nil
	}

	if m.Execution != nil {

		if err := m.Execution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execution")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtractorSummaryListExtractorsItemsMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtractorSummaryListExtractorsItemsMetrics) UnmarshalBinary(b []byte) error {
	var res ExtractorSummaryListExtractorsItemsMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
