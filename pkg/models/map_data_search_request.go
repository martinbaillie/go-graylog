// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MapDataSearchRequest map data search request
// swagger:model MapDataSearchRequest
type MapDataSearchRequest struct {

	// fields
	Fields []string `json:"fields"`

	// limit
	Limit int64 `json:"limit,omitempty"`

	// query
	Query string `json:"query,omitempty"`

	// stream id
	StreamID string `json:"stream_id,omitempty"`

	// timerange
	Timerange *MapDataSearchRequestTimerange `json:"timerange,omitempty"`
}

// Validate validates this map data search request
func (m *MapDataSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimerange(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MapDataSearchRequest) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	return nil
}

func (m *MapDataSearchRequest) validateTimerange(formats strfmt.Registry) error {

	if swag.IsZero(m.Timerange) { // not required
		return nil
	}

	if m.Timerange != nil {

		if err := m.Timerange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timerange")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MapDataSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MapDataSearchRequest) UnmarshalBinary(b []byte) error {
	var res MapDataSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
