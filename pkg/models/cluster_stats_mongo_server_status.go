// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterStatsMongoServerStatus cluster stats mongo server status
// swagger:model clusterStatsMongoServerStatus
type ClusterStatsMongoServerStatus struct {

	// connections
	Connections *ClusterStatsMongoServerStatusConnections `json:"connections,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// local time
	LocalTime strfmt.DateTime `json:"local_time,omitempty"`

	// memory
	Memory *ClusterStatsMongoServerStatusMemory `json:"memory,omitempty"`

	// network
	Network *ClusterStatsMongoServerStatusNetwork `json:"network,omitempty"`

	// pid
	Pid int64 `json:"pid,omitempty"`

	// process
	Process string `json:"process,omitempty"`

	// storage engine
	StorageEngine *ClusterStatsMongoServerStatusStorageEngine `json:"storage_engine,omitempty"`

	// uptime
	Uptime int64 `json:"uptime,omitempty"`

	// uptime estimate
	UptimeEstimate int64 `json:"uptime_estimate,omitempty"`

	// uptime millis
	UptimeMillis int64 `json:"uptime_millis,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this cluster stats mongo server status
func (m *ClusterStatsMongoServerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnections(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocalTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStorageEngine(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStatsMongoServerStatus) validateConnections(formats strfmt.Registry) error {

	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	if m.Connections != nil {

		if err := m.Connections.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connections")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatsMongoServerStatus) validateLocalTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LocalTime) { // not required
		return nil
	}

	if err := validate.FormatOf("local_time", "body", "date-time", m.LocalTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatsMongoServerStatus) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {

		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatsMongoServerStatus) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {

		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatsMongoServerStatus) validateStorageEngine(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageEngine) { // not required
		return nil
	}

	if m.StorageEngine != nil {

		if err := m.StorageEngine.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_engine")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterStatsMongoServerStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterStatsMongoServerStatus) UnmarshalBinary(b []byte) error {
	var res ClusterStatsMongoServerStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
