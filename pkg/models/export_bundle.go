// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ExportBundle export bundle
// swagger:model ExportBundle
type ExportBundle struct {

	// category
	Category string `json:"category,omitempty"`

	// dashboards
	Dashboards []string `json:"dashboards"`

	// description
	Description string `json:"description,omitempty"`

	// grok patterns
	GrokPatterns []string `json:"grok_patterns"`

	// inputs
	Inputs []string `json:"inputs"`

	// lookup caches
	LookupCaches []string `json:"lookup_caches"`

	// lookup data adapters
	LookupDataAdapters []string `json:"lookup_data_adapters"`

	// lookup tables
	LookupTables []string `json:"lookup_tables"`

	// name
	Name string `json:"name,omitempty"`

	// outputs
	Outputs []string `json:"outputs"`

	// streams
	Streams []string `json:"streams"`
}

// Validate validates this export bundle
func (m *ExportBundle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDashboards(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGrokPatterns(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLookupCaches(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLookupDataAdapters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLookupTables(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOutputs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStreams(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExportBundle) validateDashboards(formats strfmt.Registry) error {

	if swag.IsZero(m.Dashboards) { // not required
		return nil
	}

	return nil
}

func (m *ExportBundle) validateGrokPatterns(formats strfmt.Registry) error {

	if swag.IsZero(m.GrokPatterns) { // not required
		return nil
	}

	return nil
}

func (m *ExportBundle) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	return nil
}

func (m *ExportBundle) validateLookupCaches(formats strfmt.Registry) error {

	if swag.IsZero(m.LookupCaches) { // not required
		return nil
	}

	return nil
}

func (m *ExportBundle) validateLookupDataAdapters(formats strfmt.Registry) error {

	if swag.IsZero(m.LookupDataAdapters) { // not required
		return nil
	}

	return nil
}

func (m *ExportBundle) validateLookupTables(formats strfmt.Registry) error {

	if swag.IsZero(m.LookupTables) { // not required
		return nil
	}

	return nil
}

func (m *ExportBundle) validateOutputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Outputs) { // not required
		return nil
	}

	return nil
}

func (m *ExportBundle) validateStreams(formats strfmt.Registry) error {

	if swag.IsZero(m.Streams) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExportBundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExportBundle) UnmarshalBinary(b []byte) error {
	var res ExportBundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
