// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IndexSetUpdateRequest index set update request
// swagger:model IndexSetUpdateRequest
type IndexSetUpdateRequest struct {

	// description
	Description string `json:"description,omitempty"`

	// index optimization disabled
	IndexOptimizationDisabled bool `json:"index_optimization_disabled,omitempty"`

	// index optimization max num segments
	IndexOptimizationMaxNumSegments int64 `json:"index_optimization_max_num_segments,omitempty"`

	// replicas
	Replicas int64 `json:"replicas,omitempty"`

	// retention strategy
	RetentionStrategy *IndexSetUpdateRequestRetentionStrategy `json:"retention_strategy,omitempty"`

	// retention strategy class
	RetentionStrategyClass string `json:"retention_strategy_class,omitempty"`

	// rotation strategy
	RotationStrategy *IndexSetUpdateRequestRotationStrategy `json:"rotation_strategy,omitempty"`

	// rotation strategy class
	RotationStrategyClass string `json:"rotation_strategy_class,omitempty"`

	// shards
	Shards int64 `json:"shards,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// writable
	Writable bool `json:"writable,omitempty"`
}

// Validate validates this index set update request
func (m *IndexSetUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRetentionStrategy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRotationStrategy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndexSetUpdateRequest) validateRetentionStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.RetentionStrategy) { // not required
		return nil
	}

	if m.RetentionStrategy != nil {

		if err := m.RetentionStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *IndexSetUpdateRequest) validateRotationStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.RotationStrategy) { // not required
		return nil
	}

	if m.RotationStrategy != nil {

		if err := m.RotationStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rotation_strategy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IndexSetUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IndexSetUpdateRequest) UnmarshalBinary(b []byte) error {
	var res IndexSetUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
